package ru.redgho7t.telegrambot.utils;

import java.util.ArrayList;
import java.util.List;

/**
* –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ä–∞–∑–±–∏–≤–∫–∏ –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ —á–∞—Å—Ç–∏
*/
public class MessageSplitter {

private static final int MAX_MESSAGE_LENGTH = 4096;
private static final String PART_INDICATOR = "\n\nüìÑ –ß–∞—Å—Ç—å %d –∏–∑ %d";

/**
 * –†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * @param text –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
 * @return —Å–ø–∏—Å–æ–∫ —á–∞—Å—Ç–µ–π —Å–æ–æ–±—â–µ–Ω–∏—è
 */
public static List<String> splitMessage(String text) {
    List<String> parts = new ArrayList<>();

    // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ –ª–∏–º–∏—Ç
    if (text.length() <= MAX_MESSAGE_LENGTH) {
        parts.add(text);
        return parts;
    }

    // –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –∞–±–∑–∞—Ü–∞–º
    String[] paragraphs = text.split("\n\n");
    StringBuilder currentPart = new StringBuilder();

    for (String paragraph : paragraphs) {
        // –ï—Å–ª–∏ –¥–∞–∂–µ –æ–¥–∏–Ω –∞–±–∑–∞—Ü —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
        if (paragraph.length() > MAX_MESSAGE_LENGTH - 100) {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —á–∞—Å—Ç—å
            if (currentPart.length() > 0) {
                parts.add(currentPart.toString().trim());
                currentPart = new StringBuilder();
            }
            // –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π –∞–±–∑–∞—Ü –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º
            parts.addAll(splitLongParagraph(paragraph));
            continue;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–º–µ—Å—Ç–∏—Ç—Å—è –ª–∏ –∞–±–∑–∞—Ü –≤ —Ç–µ–∫—É—â—É—é —á–∞—Å—Ç—å
        if (currentPart.length() + paragraph.length() + 2 <= MAX_MESSAGE_LENGTH - 50) {
            if (currentPart.length() > 0) {
                currentPart.append("\n\n");
            }
            currentPart.append(paragraph);
        } else {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —á–∞—Å—Ç—å –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é
            if (currentPart.length() > 0) {
                parts.add(currentPart.toString().trim());
            }
            currentPart = new StringBuilder(paragraph);
        }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å
    if (currentPart.length() > 0) {
        parts.add(currentPart.toString().trim());
    }

    return addPartNumbers(parts);
}

/**
 * –†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω—ã–π –∞–±–∑–∞—Ü –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º
 */
private static List<String> splitLongParagraph(String paragraph) {
    List<String> parts = new ArrayList<>();
    String[] sentences = paragraph.split("(?<=[.!?])\\s+");
    StringBuilder currentPart = new StringBuilder();

    for (String sentence : sentences) {
        if (currentPart.length() + sentence.length() + 1 <= MAX_MESSAGE_LENGTH - 50) {
            if (currentPart.length() > 0) {
                currentPart.append(" ");
            }
            currentPart.append(sentence);
        } else {
            if (currentPart.length() > 0) {
                parts.add(currentPart.toString().trim());
            }
            currentPart = new StringBuilder(sentence);
        }
    }

    if (currentPart.length() > 0) {
        parts.add(currentPart.toString().trim());
    }

    return parts;
}

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –Ω—É–º–µ—Ä–∞—Ü–∏—é —á–∞—Å—Ç–µ–π
 */
private static List<String> addPartNumbers(List<String> parts) {
    if (parts.size() <= 1) {
        return parts;
    }

    List<String> numberedParts = new ArrayList<>();
    for (int i = 0; i < parts.size(); i++) {
        String part = parts.get(i);
        String indicator = String.format(PART_INDICATOR, i + 1, parts.size());
        numberedParts.add(part + indicator);
    }

    return numberedParts;
}
}
