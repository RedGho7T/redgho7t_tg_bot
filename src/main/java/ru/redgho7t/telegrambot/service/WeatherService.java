package ru.redgho7t.telegrambot.service;

import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import java.io.IOException;
import java.util.concurrent.TimeUnit;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã —á–µ—Ä–µ–∑ OpenWeatherMap API
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä—É—Å—Å–∫—É—é –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—é –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
 */
@Service
public class WeatherService {
    private static final Logger logger = LoggerFactory.getLogger(WeatherService.class);

    private static final String API_URL = "https://api.openweathermap.org/data/2.5/weather";
    private static final String DEFAULT_CITY = "Moscow"; // –ì–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    @Value("${telegram.bot.weather-api-key:}")
    private String apiKey;

    private final OkHttpClient httpClient;
    private String cachedWeather;
    private long lastUpdateTime = 0;
    private static final long CACHE_DURATION = 30 * 60 * 1000; // 30 –º–∏–Ω—É—Ç

    public WeatherService() {
        this.httpClient = new OkHttpClient.Builder()
                .connectTimeout(15, TimeUnit.SECONDS)
                .readTimeout(15, TimeUnit.SECONDS)
                .build();
        logger.info("WeatherService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
     */
    public String getWeather() {
        return getWeather(DEFAULT_CITY);
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞
     */
    public String getWeather(String city) {
        if (apiKey == null || apiKey.trim().isEmpty()) {
            return "‚ö†Ô∏è API –∫–ª—é—á –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.";
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à —Ç–æ–ª—å–∫–æ –¥–ª—è –≥–æ—Ä–æ–¥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if (city.equals(DEFAULT_CITY) && isCacheValid()) {
            logger.debug("–í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–≥–æ–¥—É –∏–∑ –∫—ç—à–∞");
            return cachedWeather;
        }

        try {
            String weather = fetchWeatherFromAPI(city);

            // –ö—ç—à–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è –≥–æ—Ä–æ–¥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if (city.equals(DEFAULT_CITY)) {
                cachedWeather = weather;
                lastUpdateTime = System.currentTimeMillis();
            }

            return weather;

        } catch (Exception e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã –¥–ª—è {}: {}", city, e.getMessage());
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –∫—ç—à –ø–æ–≥–æ–¥—ã
     */
    public void updateWeatherCache() {
        logger.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –ø–æ–≥–æ–¥—ã");
        try {
            String weather = fetchWeatherFromAPI(DEFAULT_CITY);
            cachedWeather = weather;
            lastUpdateTime = System.currentTimeMillis();
            logger.info("–ö—ç—à –ø–æ–≥–æ–¥—ã –æ–±–Ω–æ–≤–ª—ë–Ω");
        } catch (Exception e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—ç—à–∞ –ø–æ–≥–æ–¥—ã: {}", e.getMessage());
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –∏–∑ API
     */
    private String fetchWeatherFromAPI(String city) throws IOException {
        String url = String.format("%s?q=%s&appid=%s&units=metric&lang=ru",
                API_URL, city, apiKey);

        Request request = new Request.Builder()
                .url(url)
                .addHeader("User-Agent", "TelegramBot/1.0")
                .build();

        try (Response response = httpClient.newCall(request).execute()) {
            if (!response.isSuccessful()) {
                if (response.code() == 404) {
                    throw new IOException("–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω");
                } else if (response.code() == 401) {
                    throw new IOException("–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á");
                }
                throw new IOException("HTTP " + response.code());
            }

            if (response.body() == null) {
                throw new IOException("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API");
            }

            String jsonResponse = response.body().string();
            return parseWeatherResponse(jsonResponse, city);
        }
    }

    /**
     * –ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç API –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
     */
    private String parseWeatherResponse(String jsonResponse, String city) {
        try {
            JsonObject json = JsonParser.parseString(jsonResponse).getAsJsonObject();

            // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            JsonObject main = json.getAsJsonObject("main");
            JsonObject weather = json.getAsJsonArray("weather").get(0).getAsJsonObject();
            JsonObject wind = json.getAsJsonObject("wind");

            // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            double temp = main.get("temp").getAsDouble();
            double feelsLike = main.get("feels_like").getAsDouble();
            int humidity = main.get("humidity").getAsInt();
            int pressure = main.get("pressure").getAsInt();

            String description = weather.get("description").getAsString();
            String icon = weather.get("icon").getAsString();

            double windSpeed = wind.has("speed") ? wind.get("speed").getAsDouble() : 0;

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –ø–æ–≥–æ–¥—ã
            String weatherEmoji = getWeatherEmoji(icon);

            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            StringBuilder result = new StringBuilder();
            result.append(String.format("üå§Ô∏è **–ü–æ–≥–æ–¥–∞ –≤ %s**\n\n",
                    city.substring(0, 1).toUpperCase() + city.substring(1).toLowerCase()));

            result.append(String.format("%s **%s**\n", weatherEmoji,
                    description.substring(0, 1).toUpperCase() + description.substring(1)));

            result.append(String.format("üå°Ô∏è **–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:** %.1f¬∞C\n", temp));
            result.append(String.format("ü§î **–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫:** %.1f¬∞C\n", feelsLike));
            result.append(String.format("üíß **–í–ª–∞–∂–Ω–æ—Å—Ç—å:** %d%%\n", humidity));
            result.append(String.format("üìä **–î–∞–≤–ª–µ–Ω–∏–µ:** %d –º–º —Ä—Ç.—Å—Ç.\n",
                    (int) (pressure * 0.75))); // –ü–µ—Ä–µ–≤–æ–¥ –∏–∑ –≥–ü–∞ –≤ –º–º —Ä—Ç.—Å—Ç.

            if (windSpeed > 0) {
                result.append(String.format("üí® **–í–µ—Ç–µ—Ä:** %.1f –º/—Å\n", windSpeed));
            }

            result.append(String.format("\nüìÖ *–û–±–Ω–æ–≤–ª–µ–Ω–æ: %s*",
                    java.time.LocalDateTime.now().format(
                            java.time.format.DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm"))));

            return result.toString();

        } catch (Exception e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –æ—Ç–≤–µ—Ç–∞ API: {}", e.getMessage());
            throw new RuntimeException("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ");
        }
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è –∏–∫–æ–Ω–∫–∏ –ø–æ–≥–æ–¥—ã
     */
    private String getWeatherEmoji(String icon) {
        return switch (icon.substring(0, 2)) {
            case "01" -> "‚òÄÔ∏è"; // —è—Å–Ω–æ
            case "02" -> "‚õÖ"; // –º–∞–ª–æ–æ–±–ª–∞—á–Ω–æ
            case "03" -> "‚òÅÔ∏è"; // –æ–±–ª–∞—á–Ω–æ
            case "04" -> "‚òÅÔ∏è"; // –ø–∞—Å–º—É—Ä–Ω–æ
            case "09" -> "üåßÔ∏è"; // –¥–æ–∂–¥—å
            case "10" -> "üå¶Ô∏è"; // –¥–æ–∂–¥—å —Å —Å–æ–ª–Ω—Ü–µ–º
            case "11" -> "‚õàÔ∏è"; // –≥—Ä–æ–∑–∞
            case "13" -> "‚ùÑÔ∏è"; // —Å–Ω–µ–≥
            case "50" -> "üå´Ô∏è"; // —Ç—É–º–∞–Ω
            default -> "üå§Ô∏è";
        };
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç—É–∞–ª–µ–Ω –ª–∏ –∫—ç—à
     */
    private boolean isCacheValid() {
        return cachedWeather != null &&
                (System.currentTimeMillis() - lastUpdateTime) < CACHE_DURATION;
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞
     */
    public String getServiceStatus() {
        boolean hasApiKey = apiKey != null && !apiKey.trim().isEmpty();
        boolean hasCachedData = cachedWeather != null;

        return String.format("–ü–æ–≥–æ–¥–Ω—ã–π —Å–µ—Ä–≤–∏—Å: %s, API –∫–ª—é—á: %s, –ö—ç—à: %s",
                hasApiKey ? "‚úÖ –ì–æ—Ç–æ–≤" : "‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω",
                hasApiKey ? "‚úÖ –ï—Å—Ç—å" : "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                hasCachedData ? "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" : "‚ùå –ü—É—Å—Ç");
    }
}