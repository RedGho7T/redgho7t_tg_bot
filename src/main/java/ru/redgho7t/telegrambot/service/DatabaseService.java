package ru.redgho7t.telegrambot.service;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import ru.redgho7t.telegrambot.entity.MessageLog;
import ru.redgho7t.telegrambot.entity.MessageLog.MessageType;
import ru.redgho7t.telegrambot.repository.MessageLogRepository;

import java.time.LocalDateTime;
import java.util.List;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –±–æ—Ç—É
 */
@Service
@Transactional
public class DatabaseService {

    private static final Logger logger = LoggerFactory.getLogger(DatabaseService.class);

    private final MessageLogRepository messageLogRepository;

    @Autowired
    public DatabaseService(MessageLogRepository messageLogRepository) {
        this.messageLogRepository = messageLogRepository;
        logger.info("DatabaseService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
    }

    /**
     * –õ–æ–≥–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
     * @param chatId ID —á–∞—Ç–∞
     * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param username –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param userMessage —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param botResponse –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
     * @param messageType —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
     * @param isGroup –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç –∏–ª–∏ –Ω–µ—Ç
     * @param responseTimeMs –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
     * @return —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç MessageLog
     */
    public MessageLog logMessage(Long chatId, Long userId, String username,
                                 String userMessage, String botResponse,
                                 MessageType messageType, Boolean isGroup,
                                 Long responseTimeMs) {
        try {
            MessageLog messageLog = new MessageLog();
            messageLog.setChatId(chatId);
            messageLog.setUserId(userId);
            messageLog.setUsername(username);
            messageLog.setUserMessage(userMessage);
            messageLog.setBotResponse(botResponse);
            messageLog.setMessageType(messageType);
            messageLog.setIsGroup(isGroup);
            messageLog.setResponseTimeMs(responseTimeMs);
            messageLog.setCreatedAt(LocalDateTime.now());

            MessageLog saved = messageLogRepository.save(messageLog);
            logger.debug("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î: chatId={}, messageType={}, responseTime={}ms",
                    chatId, messageType, responseTimeMs);
            return saved;

        } catch (Exception e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ë–î: chatId={}, error={}",
                    chatId, e.getMessage(), e);
            throw new RuntimeException("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î", e);
        }
    }

    /**
     * –õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
     * @param chatId ID —á–∞—Ç–∞
     * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param username –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param userMessage —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param errorMessage —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
     * @param isGroup –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç –∏–ª–∏ –Ω–µ—Ç
     * @return —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç MessageLog
     */
    public MessageLog logError(Long chatId, Long userId, String username,
                               String userMessage, String errorMessage, Boolean isGroup) {
        try {
            MessageLog messageLog = new MessageLog();
            messageLog.setChatId(chatId);
            messageLog.setUserId(userId);
            messageLog.setUsername(username);
            messageLog.setUserMessage(userMessage);
            messageLog.setMessageType(MessageType.ERROR);
            messageLog.setErrorMessage(errorMessage);
            messageLog.setIsGroup(isGroup);
            messageLog.setCreatedAt(LocalDateTime.now());

            MessageLog saved = messageLogRepository.save(messageLog);
            logger.warn("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –æ—à–∏–±–∫–∞ –≤ –ë–î: chatId={}, error={}", chatId, errorMessage);
            return saved;

        } catch (Exception e) {
            logger.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—à–∏–±–∫–∏ –≤ –ë–î: {}", e.getMessage(), e);
            // –ù–µ –±—Ä–æ—Å–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –Ω–∞—Ä—É—à–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞
            return null;
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞
     * @param chatId ID —á–∞—Ç–∞
     * @param limit –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
     * @return —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
     */
    public List<MessageLog> getChatHistory(Long chatId, int limit) {
        try {
            return messageLogRepository.findRecentMessagesByChat(chatId, limit);
        } catch (Exception e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ {}: {}", chatId, e.getMessage(), e);
            return List.of(); // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –±–æ—Ç—É
     * @return –æ–±—ä–µ–∫—Ç —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
     */
    public BotStatistics getBotStatistics() {
        try {
            LocalDateTime todayStart = LocalDateTime.now().withHour(0).withMinute(0).withSecond(0);
            LocalDateTime weekStart = LocalDateTime.now().minusDays(7);

            Long messagesToday = messageLogRepository.countMessagesToday(todayStart);
            Double avgResponseTime = messageLogRepository.getAverageResponseTime(weekStart);
            List<MessageLog> recentErrors = messageLogRepository.findErrorMessages(weekStart);

            return new BotStatistics(messagesToday, avgResponseTime, recentErrors.size());

        } catch (Exception e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {}", e.getMessage(), e);
            return new BotStatistics(0L, 0.0, 0);
        }
    }

    /**
     * –û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞ –≤ –ë–î
     * @param daysToKeep –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–æ–≤
     * @return –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
     */
    public int cleanupOldLogs(int daysToKeep) {
        try {
            LocalDateTime cutoffDate = LocalDateTime.now().minusDays(daysToKeep);
            int deletedCount = messageLogRepository.deleteOldLogs(cutoffDate);
            logger.info("–£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤: {} –∑–∞–ø–∏—Å–µ–π (—Å—Ç–∞—Ä—à–µ {} –¥–Ω–µ–π)", deletedCount, daysToKeep);
            return deletedCount;
        } catch (Exception e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤: {}", e.getMessage(), e);
            return 0;
        }
    }

    /**
     * –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞
     */
    public static class BotStatistics {
        private final Long messagesToday;
        private final Double averageResponseTime;
        private final Integer errorsLastWeek;

        public BotStatistics(Long messagesToday, Double averageResponseTime, Integer errorsLastWeek) {
            this.messagesToday = messagesToday != null ? messagesToday : 0L;
            this.averageResponseTime = averageResponseTime != null ? averageResponseTime : 0.0;
            this.errorsLastWeek = errorsLastWeek != null ? errorsLastWeek : 0;
        }

        // Getters
        public Long getMessagesToday() { return messagesToday; }
        public Double getAverageResponseTime() { return averageResponseTime; }
        public Integer getErrorsLastWeek() { return errorsLastWeek; }

        @Override
        public String toString() {
            return String.format("üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:**\n\n" +
                            "‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: %d\n" +
                            "‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: %.2f –º—Å\n" +
                            "‚Ä¢ –û—à–∏–±–æ–∫ –∑–∞ –Ω–µ–¥–µ–ª—é: %d",
                    messagesToday, averageResponseTime, errorsLastWeek);
        }
    }
}