package ru.redgho7t.telegrambot.service;

import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import java.io.IOException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.HashMap;
import java.util.Map;
import java.util.Random;
import java.util.concurrent.TimeUnit;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
 */
@Service
public class HoroscopeService {
    private static final Logger logger = LoggerFactory.getLogger(HoroscopeService.class);

    private final OkHttpClient httpClient;
    private final Map<String, String> horoscopeCache = new HashMap<>();
    private String lastUpdateDate = "";

    // –ó–Ω–∞–∫–∏ –∑–æ–¥–∏–∞–∫–∞ —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º –Ω–∞ —Ä—É—Å—Å–∫–∏–π (–∏—Å–ø–æ–ª—å–∑—É–µ–º HashMap –≤–º–µ—Å—Ç–æ Map.of())
    private static final Map<String, String> ZODIAC_SIGNS = createZodiacSigns();

    private static Map<String, String> createZodiacSigns() {
        Map<String, String> signs = new HashMap<>();
        signs.put("–æ–≤–µ–Ω", "aries");
        signs.put("—Ç–µ–ª–µ—Ü", "taurus");
        signs.put("–±–ª–∏–∑–Ω–µ—Ü—ã", "gemini");
        signs.put("—Ä–∞–∫", "cancer");
        signs.put("–ª–µ–≤", "leo");
        signs.put("–¥–µ–≤–∞", "virgo");
        signs.put("–≤–µ—Å—ã", "libra");
        signs.put("—Å–∫–æ—Ä–ø–∏–æ–Ω", "scorpio");
        signs.put("—Å—Ç—Ä–µ–ª–µ—Ü", "sagittarius");
        signs.put("–∫–æ–∑–µ—Ä–æ–≥", "capricorn");
        signs.put("–≤–æ–¥–æ–ª–µ–π", "aquarius");
        signs.put("—Ä—ã–±—ã", "pisces");
        return signs;
    }

    // Fallback –≥–æ—Ä–æ—Å–∫–æ–ø—ã –Ω–∞ —Å–ª—É—á–∞–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API (–∏—Å–ø–æ–ª—å–∑—É–µ–º HashMap)
    private static final Map<String, String> FALLBACK_HOROSCOPES = createFallbackHoroscopes();

    private static Map<String, String> createFallbackHoroscopes() {
        Map<String, String> horoscopes = new HashMap<>();
        horoscopes.put("–æ–≤–µ–Ω", "–°–µ–≥–æ–¥–Ω—è –∑–≤—ë–∑–¥—ã —Å–æ–≤–µ—Ç—É—é—Ç –≤–∞–º –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω–µ–µ! –£–¥–∞—á–∞ –±–ª–∞–≥–æ–≤–æ–ª–∏—Ç —Å–º–µ–ª—ã–º. –•–æ—Ä–æ—à–∏–π –¥–µ–Ω—å –¥–ª—è –Ω–æ–≤—ã—Ö –Ω–∞—á–∏–Ω–∞–Ω–∏–π.");
        horoscopes.put("—Ç–µ–ª–µ—Ü", "–î–µ–Ω—å –ø—Ä–∏–Ω–µ—Å—ë—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å. –°—Ç–æ–∏—Ç –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã.");
        horoscopes.put("–±–ª–∏–∑–Ω–µ—Ü—ã", "–í–∞—à–∞ –∫–æ–º–º—É–Ω–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ–≥–æ–¥–Ω—è –±—É–¥–µ—Ç –æ—Å–æ–±–µ–Ω–Ω–æ —Ü–µ–Ω–Ω–∞. –í—Ä–µ–º—è –¥–ª—è –æ–±—â–µ–Ω–∏—è –∏ –Ω–æ–≤—ã—Ö –∑–Ω–∞–∫–æ–º—Å—Ç–≤.");
        horoscopes.put("—Ä–∞–∫", "–°–µ–º—å—è –∏ –¥–æ–º —Ç—Ä–µ–±—É—é—Ç –≤–∞—à–µ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è. –ò–Ω—Ç—É–∏—Ü–∏—è –ø–æ–º–æ–∂–µ—Ç –ø—Ä–∏–Ω—è—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ.");
        horoscopes.put("–ª–µ–≤", "–í–∞—à–∞ —Ö–∞—Ä–∏–∑–º–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–∞ –≤—ã—Å–æ—Ç–µ! –û—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å –¥–ª—è —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞ –∏ —Å–∞–º–æ–≤—ã—Ä–∞–∂–µ–Ω–∏—è.");
        horoscopes.put("–¥–µ–≤–∞", "–û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –∏ –≤–Ω–∏–º–∞–Ω–∏–µ –∫ –¥–µ—Ç–∞–ª—è–º –ø—Ä–∏–Ω–µ—Å—É—Ç —É—Å–ø–µ—Ö. –ò–∑–±–µ–≥–∞–π—Ç–µ —Å–ø–µ—à–∫–∏ –≤ –≤–∞–∂–Ω—ã—Ö –¥–µ–ª–∞—Ö.");
        horoscopes.put("–≤–µ—Å—ã", "–ì–∞—Ä–º–æ–Ω–∏—è –∏ –±–∞–ª–∞–Ω—Å ‚Äî –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–Ω—è. –•–æ—Ä–æ—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤.");
        horoscopes.put("—Å–∫–æ—Ä–ø–∏–æ–Ω", "–ì–ª—É–±–æ–∫–∞—è –∏–Ω—Ç—É–∏—Ü–∏—è –ø–æ–º–æ–∂–µ—Ç —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Å–ª–æ–∂–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö. –î–æ–≤–µ—Ä—å—Ç–µ—Å—å —Å–≤–æ–∏–º —á—É–≤—Å—Ç–≤–∞–º.");
        horoscopes.put("—Å—Ç—Ä–µ–ª–µ—Ü", "–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç–æ–≤ –∂–¥—ë—Ç –≤–∞—Å! –í–æ–∑–º–æ–∂–Ω—ã –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –∏–ª–∏ –Ω–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è.");
        horoscopes.put("–∫–æ–∑–µ—Ä–æ–≥", "–£–ø–æ—Ä—Å—Ç–≤–æ –∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ –ø—Ä–∏–Ω–µ—Å—É—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã. –ö–∞—Ä—å–µ—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã —Ç—Ä–µ–±—É—é—Ç –æ—Å–æ–±–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è.");
        horoscopes.put("–≤–æ–¥–æ–ª–µ–π", "–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å ‚Äî –≤–∞—à–∏ –∫–æ–∑—ã—Ä–∏. –ù–µ –±–æ–π—Ç–µ—Å—å –±—ã—Ç—å —Å–æ–±–æ–π.");
        horoscopes.put("—Ä—ã–±—ã", "–¢–≤–æ—Ä—á–µ—Å–∫–æ–µ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ –∏ —ç–º–ø–∞—Ç–∏—è –ø–æ–º–æ–≥—É—Ç –≤ –æ–±—â–µ–Ω–∏–∏ —Å –æ–∫—Ä—É–∂–∞—é—â–∏–º–∏.");
        return horoscopes;
    }

    public HoroscopeService() {
        this.httpClient = new OkHttpClient.Builder()
                .connectTimeout(15, TimeUnit.SECONDS)
                .readTimeout(15, TimeUnit.SECONDS)
                .build();
        logger.info("HoroscopeService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –≥–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞
     */
    public String getHoroscope(String zodiacSign) {
        String sign = zodiacSign.toLowerCase().trim();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∑–Ω–∞–∫–∞
        if (!ZODIAC_SIGNS.containsKey(sign)) {
            return "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–Ω–∞–∫–∏: " +
                    String.join(", ", ZODIAC_SIGNS.keySet());
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        updateCacheIfNeeded();

        // –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ—Å–∫–æ–ø –∏–∑ –∫—ç—à–∞ –∏–ª–∏ fallback
        String horoscope = horoscopeCache.getOrDefault(sign, FALLBACK_HOROSCOPES.get(sign));

        return formatHoroscope(sign, horoscope);
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø
     */
    public String getRandomHoroscope() {
        String[] signs = ZODIAC_SIGNS.keySet().toArray(new String[0]);
        Random random = new Random();
        String randomSign = signs[random.nextInt(signs.length)];
        return getHoroscope(randomSign);
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ –≥–æ—Ä–æ—Å–∫–æ–ø—ã
     */
    public void updateAllHoroscopes() {
        logger.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤");
        String today = LocalDate.now().format(DateTimeFormatter.ISO_LOCAL_DATE);

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–æ—Ä–æ—Å–∫–æ–ø—ã –¥–ª—è –≤—Å–µ—Ö –∑–Ω–∞–∫–æ–≤
        for (Map.Entry<String, String> entry : ZODIAC_SIGNS.entrySet()) {
            try {
                String horoscope = fetchHoroscopeFromAPI(entry.getValue());
                if (horoscope != null && !horoscope.trim().isEmpty()) {
                    horoscopeCache.put(entry.getKey(), horoscope);
                }
                // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                Thread.sleep(500);
            } catch (Exception e) {
                logger.warn("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –¥–ª—è {}: {}", entry.getKey(), e.getMessage());
            }
        }

        lastUpdateDate = today;
        logger.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {} –∑–Ω–∞–∫–æ–≤", horoscopeCache.size());
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫—ç—à –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
     */
    private void updateCacheIfNeeded() {
        String today = LocalDate.now().format(DateTimeFormatter.ISO_LOCAL_DATE);

        if (!today.equals(lastUpdateDate) || horoscopeCache.isEmpty()) {
            logger.info("–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤ –Ω–∞ {}", today);
            updateAllHoroscopes();
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –≥–æ—Ä–æ—Å–∫–æ–ø –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ API
     */
    private String fetchHoroscopeFromAPI(String englishSign) throws IOException {
        // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π fallback
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º "–≥–æ—Ä–æ—Å–∫–æ–ø" –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞—Ç—ã –∏ –∑–Ω–∞–∫–∞
        String today = LocalDate.now().format(DateTimeFormatter.ISO_LOCAL_DATE);
        Random random = new Random((today + englishSign).hashCode());

        String[] predictions = {
                "–°–µ–≥–æ–¥–Ω—è –≤–∞—Å –∂–¥—É—Ç –ø—Ä–∏—è—Ç–Ω—ã–µ —Å—é—Ä–ø—Ä–∏–∑—ã! –ó–≤—ë–∑–¥—ã –±–ª–∞–≥–æ–≤–æ–ª—è—Ç –Ω–æ–≤—ã–º –Ω–∞—á–∏–Ω–∞–Ω–∏—è–º.",
                "–î–µ–Ω—å –ø–æ—Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ –æ–±—â–µ–Ω–∏–∏. –ò–∑–±–µ–≥–∞–π—Ç–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π.",
                "–£–¥–∞—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Ç–≤–æ—Ä—á–µ—Å–∫–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤. –í–∞—à–∞ –∏–Ω—Ç—É–∏—Ü–∏—è –Ω–∞ –≤—ã—Å–æ—Ç–µ!",
                "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã —Ç—Ä–µ–±—É—é—Ç –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç–∏. –ù–µ —Å–ø–µ—à–∏—Ç–µ —Å –∫—Ä—É–ø–Ω—ã–º–∏ —Ç—Ä–∞—Ç–∞–º–∏.",
                "–°–µ–º–µ–π–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –ø—Ä–∏–Ω–µ—Å—É—Ç —Ä–∞–¥–æ—Å—Ç—å. –ü—Ä–æ–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Å –±–ª–∏–∑–∫–∏–º–∏.",
                "–ö–∞—Ä—å–µ—Ä–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –º–æ–≥—É—Ç –ø–æ—è–≤–∏—Ç—å—Å—è –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ. –ë—É–¥—å—Ç–µ –≥–æ—Ç–æ–≤—ã –∫ –ø–µ—Ä–µ–º–µ–Ω–∞–º.",
                "–•–æ—Ä–æ—à–∏–π –¥–µ–Ω—å –¥–ª—è —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—è. –ò–∑—É—á–∏—Ç–µ —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ.",
                "–í–∞—à–∞ —ç–Ω–µ—Ä–≥–∏—è –ø—Ä–∏–≤–ª–µ—á—ë—Ç –≤–Ω–∏–º–∞–Ω–∏–µ –æ–∫—Ä—É–∂–∞—é—â–∏—Ö. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ —Å –ø–æ–ª—å–∑–æ–π."
        };

        return predictions[random.nextInt(predictions.length)];
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≥–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
     */
    private String formatHoroscope(String sign, String horoscope) {
        String emoji = getZodiacEmoji(sign);
        String capitalizedSign = sign.substring(0, 1).toUpperCase() + sign.substring(1);
        String today = LocalDate.now().format(DateTimeFormatter.ofPattern("dd.MM.yyyy"));

        return String.format("üîÆ **–ì–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è %s %s**\n\n%s\n\nüìÖ *%s*",
                emoji, capitalizedSign, horoscope, today);
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞
     */
    private String getZodiacEmoji(String sign) {
        return switch (sign.toLowerCase()) {
            case "–æ–≤–µ–Ω" -> "‚ôà";
            case "—Ç–µ–ª–µ—Ü" -> "‚ôâ";
            case "–±–ª–∏–∑–Ω–µ—Ü—ã" -> "‚ôä";
            case "—Ä–∞–∫" -> "‚ôã";
            case "–ª–µ–≤" -> "‚ôå";
            case "–¥–µ–≤–∞" -> "‚ôç";
            case "–≤–µ—Å—ã" -> "‚ôé";
            case "—Å–∫–æ—Ä–ø–∏–æ–Ω" -> "‚ôè";
            case "—Å—Ç—Ä–µ–ª–µ—Ü" -> "‚ôê";
            case "–∫–æ–∑–µ—Ä–æ–≥" -> "‚ôë";
            case "–≤–æ–¥–æ–ª–µ–π" -> "‚ôí";
            case "—Ä—ã–±—ã" -> "‚ôì";
            default -> "‚≠ê";
        };
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∑–Ω–∞–∫–∞–º –∑–æ–¥–∏–∞–∫–∞
     */
    public String getZodiacGuide() {
        StringBuilder guide = new StringBuilder();
        guide.append("üîÆ **–ó–Ω–∞–∫–∏ –∑–æ–¥–∏–∞–∫–∞:**\n\n");

        for (String sign : ZODIAC_SIGNS.keySet()) {
            String emoji = getZodiacEmoji(sign);
            String capitalizedSign = sign.substring(0, 1).toUpperCase() + sign.substring(1);
            guide.append(String.format("%s **%s**\n", emoji, capitalizedSign));
        }

        guide.append("\nüìù *–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–Ω–∞–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ—Ä–æ—Å–∫–æ–ø–∞*");
        guide.append("\nüé≤ *–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ \"–≥–æ—Ä–æ—Å–∫–æ–ø\" –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø–∞*");

        return guide.toString();
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Ä–≤–∏—Å–∞
     */
    public String getServiceStatus() {
        return String.format("–°–µ—Ä–≤–∏—Å –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤: ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω\n–ö—ç—à: %d –∑–Ω–∞–∫–æ–≤\n–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: %s",
                horoscopeCache.size(),
                lastUpdateDate.isEmpty() ? "–Ω–∏–∫–æ–≥–¥–∞" : lastUpdateDate);
    }
}