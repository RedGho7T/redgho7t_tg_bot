package ru.redgho7t.telegrambot.service;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

/**
 * –°–µ—Ä–≤–∏—Å —Ä—É–ª–µ—Ç–∫–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª –æ—Ç 1 –¥–æ 777
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ Telegram Dice API
 */
@Service
public class RouletteService {
    private static final Logger logger = LoggerFactory.getLogger(RouletteService.class);

    private static final int MIN_NUMBER = 1;
    private static final int MAX_NUMBER = 777;

    private final Random random;
    private final List<RouletteResult> history;

    public RouletteService() {
        this.random = new Random();
        this.history = new ArrayList<>();
        logger.info("RouletteService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
    }

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 777
     */
    public RouletteResult spin() {
        int number = random.nextInt(MAX_NUMBER) + MIN_NUMBER;
        RouletteResult result = new RouletteResult(number);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)
        synchronized (history) {
            history.add(result);
            if (history.size() > 100) {
                history.remove(0);
            }
        }

        logger.info("–†—É–ª–µ—Ç–∫–∞: –≤—ã–ø–∞–ª–æ —á–∏—Å–ª–æ {}", number);
        return result;
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
     */
    public String formatResult(RouletteResult result) {
        int number = result.getNumber();

        StringBuilder message = new StringBuilder();
        message.append("üé∞ **–†—É–ª–µ—Ç–∫–∞ —É–¥–∞—á–∏!**\n\n");
        message.append(String.format("üî¢ **–í–∞—à–µ —á–∏—Å–ª–æ: %d**\n\n", number));

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —á–∏—Å–ª–∞
        if (number == 777) {
            message.append("üéâ **–î–ñ–ï–ö–ü–û–¢!** üéâ\n");
            message.append("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–∏–∑!\n");
            message.append("üíé –ù–µ–≤–µ—Ä–æ—è—Ç–Ω–∞—è —É–¥–∞—á–∞! ‚ú®");
        } else if (number >= 700) {
            message.append("‚≠ê **–û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!** ‚≠ê\n");
            message.append("–í–∞–º –æ—á–µ–Ω—å –ø–æ–≤–µ–∑–ª–æ!\n");
            message.append("üçÄ –£–¥–∞—á–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ –Ω–∞ –≤–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ!");
        } else if (number >= 500) {
            message.append("üëç **–•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!** üëç\n");
            message.append("–ù–µ–ø–ª–æ—Ö–∞—è —É–¥–∞—á–∞!\n");
            message.append("üé≤ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!");
        } else if (number >= 300) {
            message.append("üéØ **–°—Ä–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç**\n");
            message.append("–ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å!\n");
            message.append("üîÑ –°–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –ø–æ–≤–µ–∑—ë—Ç –±–æ–ª—å—à–µ!");
        } else if (number >= 100) {
            message.append("üåü **–ù–∞—á–∞–ª—å–Ω–∞—è —É–¥–∞—á–∞**\n");
            message.append("–≠—Ç–æ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ!\n");
            message.append("üí™ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–≥—Ä–∞—Ç—å!");
        } else {
            message.append("üçÄ **–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!** üçÄ\n");
            message.append("–£–¥–∞—á–∞ –ª—é–±–∏—Ç –Ω–∞—Å—Ç–æ–π—á–∏–≤—ã—Ö!\n");
            message.append("üé∞ –ö—Ä—É—Ç–∏—Ç–µ —Ä—É–ª–µ—Ç–∫—É —Å–Ω–æ–≤–∞!");
        }

        return message.toString();
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞
     */
    public String getStatistics() {
        if (history.isEmpty()) {
            return "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä—É–ª–µ—Ç–∫–∏**\n\n–ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π \"lucky\"!";
        }

        int total = history.size();
        int jackpots = 0;
        int excellent = 0; // 700+
        int good = 0; // 500+
        int sum = 0;
        int max = 0;
        int min = MAX_NUMBER;

        for (RouletteResult result : history) {
            int number = result.getNumber();
            sum += number;

            if (number > max) max = number;
            if (number < min) min = number;

            if (number == 777) {
                jackpots++;
            } else if (number >= 700) {
                excellent++;
            } else if (number >= 500) {
                good++;
            }
        }

        double average = (double) sum / total;

        StringBuilder stats = new StringBuilder();
        stats.append("üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä—É–ª–µ—Ç–∫–∏**\n\n");
        stats.append(String.format("üé≤ **–í—Å–µ–≥–æ –∏–≥—Ä:** %d\n", total));
        stats.append(String.format("üìà **–°—Ä–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ:** %.1f\n", average));
        stats.append(String.format("üî∫ **–ú–∞–∫—Å–∏–º—É–º:** %d\n", max));
        stats.append(String.format("üîª **–ú–∏–Ω–∏–º—É–º:** %d\n", min));
        stats.append("\n**–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:**\n");

        if (jackpots > 0) {
            stats.append(String.format("üéâ **–î–∂–µ–∫–ø–æ—Ç—ã (777):** %d\n", jackpots));
        }
        stats.append(String.format("‚≠ê **–û—Ç–ª–∏—á–Ω—ã–µ (700+):** %d\n", excellent));
        stats.append(String.format("üëç **–•–æ—Ä–æ—à–∏–µ (500+):** %d\n", good));
        stats.append(String.format("üéØ **–û—Å—Ç–∞–ª—å–Ω—ã–µ:** %d\n", total - jackpots - excellent - good));

        if (jackpots > 0) {
            double jackpotChance = (double) jackpots / total * 100;
            stats.append(String.format("\nüé∞ **–®–∞–Ω—Å –¥–∂–µ–∫–ø–æ—Ç–∞:** %.2f%%", jackpotChance));
        }

        return stats.toString();
    }

    /**
     * –û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
     */
    public void clearHistory() {
        synchronized (history) {
            history.clear();
        }
        logger.info("–ò—Å—Ç–æ—Ä–∏—è —Ä—É–ª–µ—Ç–∫–∏ –æ—á–∏—â–µ–Ω–∞");
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
     */
    public String getRecentResults(int count) {
        if (history.isEmpty()) {
            return "üé∞ –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –ø–æ–∫–∞–∑–∞";
        }

        int size = Math.min(count, history.size());
        List<RouletteResult> recent = history.subList(history.size() - size, history.size());

        StringBuilder results = new StringBuilder();
        results.append(String.format("üé≤ **–ü–æ—Å–ª–µ–¥–Ω–∏–µ %d —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:**\n\n", size));

        for (int i = recent.size() - 1; i >= 0; i--) {
            RouletteResult result = recent.get(i);
            String emoji = getNumberEmoji(result.getNumber());
            results.append(String.format("%s %d\n", emoji, result.getNumber()));
        }

        return results.toString();
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è —á–∏—Å–ª–∞
     */
    private String getNumberEmoji(int number) {
        if (number == 777) {
            return "üéâ";
        } else if (number >= 700) {
            return "‚≠ê";
        } else if (number >= 500) {
            return "üëç";
        } else if (number >= 300) {
            return "üéØ";
        } else {
            return "üé≤";
        }
    }

    /**
     * –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä—É–ª–µ—Ç–∫–∏
     */
    public static class RouletteResult {
        private final int number;
        private final long timestamp;

        public RouletteResult(int number) {
            this.number = number;
            this.timestamp = System.currentTimeMillis();
        }

        public int getNumber() {
            return number;
        }

        public long getTimestamp() {
            return timestamp;
        }

        public boolean isJackpot() {
            return number == 777;
        }

        public boolean isExcellent() {
            return number >= 700;
        }

        public boolean isGood() {
            return number >= 500;
        }
    }
}