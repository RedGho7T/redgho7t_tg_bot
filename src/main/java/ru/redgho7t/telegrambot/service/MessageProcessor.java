package ru.redgho7t.telegrambot.service;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import ru.redgho7t.telegrambot.utils.ResponseTemplates;
import ru.redgho7t.telegrambot.service.GoogleAiService;

import java.util.HashMap;
import java.util.Map;

/**
* –°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
* <p>
* –ó–∞–º–µ–Ω—ë–Ω PerplexityService –Ω–∞ GoogleAiService –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Gemini API.
*/
public class MessageProcessor {

private static final Logger logger = LoggerFactory.getLogger(MessageProcessor.class);

private final ResponseTemplates responseTemplates;
private final Map<String, String> keywordTemplates;
private final GoogleAiService googleAiService;

/**
 * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
 *
 * @param googleAiService —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Gemini API
 */
public MessageProcessor(GoogleAiService googleAiService) {
    this.googleAiService = googleAiService;
    this.responseTemplates = new ResponseTemplates();
    this.keywordTemplates = initializeKeywordTemplates();

    logger.info("MessageProcessor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å GoogleAiService");
}

private Map<String, String> initializeKeywordTemplates() {
    Map<String, String> templates = new HashMap<>();

    templates.put("–ø—Ä–∏–≤–µ—Ç", "–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç AI Bot. –†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ: ");
    templates.put("hello", "Hello! I'm AI Bot. Tell me: ");
    templates.put("–ø–æ–º–æ—â—å", "–ö–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å —Å –≤–æ–ø—Ä–æ—Å–æ–º: ");
    templates.put("help", "How can I help you with: ");
    templates.put("–Ω–∞–π–¥–∏", "–ù–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ: ");
    templates.put("search", "Search for information about: ");
    templates.put("—á—Ç–æ —Ç–∞–∫–æ–µ", "–ß—Ç–æ —Ç–∞–∫–æ–µ ");
    templates.put("what is", "What is ");
    templates.put("–æ–±—ä—è—Å–Ω–∏", "–û–±—ä—è—Å–Ω–∏ ");
    templates.put("explain", "Explain ");
    templates.put("—Ä–∞—Å—Å–∫–∞–∂–∏", "–†–∞—Å—Å–∫–∞–∂–∏ –æ ");
    templates.put("tell me", "Tell me about ");
    templates.put("—Å—Ä–∞–≤–Ω–∏", "–°—Ä–∞–≤–Ω–∏ ");
    templates.put("compare", "Compare ");
    templates.put("—Ä–∞–∑–Ω–∏—Ü–∞", "–í —á–µ–º —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É ");
    templates.put("difference", "What's the difference between ");

    return templates;
}

public ProcessingResult processUpdate(Update update) {
    try {
        if (update.hasMessage()) {
            return processMessage(update.getMessage());
        } else if (update.hasCallbackQuery()) {
            return processCallbackQuery(update);
        }
        return new ProcessingResult("", false);
    } catch (Exception e) {
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {}", e.getMessage(), e);
        return new ProcessingResult("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.", true);
    }
}

private ProcessingResult processMessage(Message message) {
    String messageText = message.getText();
    if (messageText == null || messageText.trim().isEmpty()) {
        return new ProcessingResult("", false);
    }

    Long chatId = message.getChatId();
    String userName = getUserName(message);
    boolean isGroup = message.getChat().isGroupChat() || message.getChat().isSuperGroupChat();

    logger.info("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {}: {}", userName, messageText);

    if (messageText.startsWith("/")) {
        return processCommand(messageText, chatId, isGroup);
    }
    if (isGroup && !isMessageForBot(message)) {
        return new ProcessingResult("", false);
    }
    return processUserMessage(messageText, userName);
}

private ProcessingResult processCommand(String command, Long chatId, boolean isGroup) {
    String cmd = command.toLowerCase().split("\\s+")[0];
    return switch (cmd) {
        case "/start" -> new ProcessingResult(responseTemplates.getStartMessage(), true);
        case "/help" -> new ProcessingResult(responseTemplates.getHelpMessage(), true);
        case "/about" -> new ProcessingResult(responseTemplates.getAboutMessage(), true);
        case "/status" -> processStatusCommand();
        case "/models" -> new ProcessingResult(responseTemplates.getModelsMessage(), true);
        default -> {
            if (isGroup) {
                yield new ProcessingResult("", false);
            } else {
                yield new ProcessingResult(
                        "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.", true
                );
            }
        }
    };
}

private ProcessingResult processStatusCommand() {
    boolean isAvailable = googleAiService.isApiAvailable();
    String status = isAvailable ? "‚úÖ –û–Ω–ª–∞–π–Ω" : "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω";
    String message = String.format(
            "ü§ñ **–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:**\n\nAI API: %s\n–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: –∞–∫—Ç–∏–≤–µ–Ω\n–í–µ—Ä—Å–∏—è: 1.0.0",
            status
    );
    return new ProcessingResult(message, true);
}

private ProcessingResult processUserMessage(String messageText, String userName) {
    String enhanced = enhanceMessageWithTemplate(messageText);
    try {
        String aiResponse = googleAiService.sendRequest(enhanced);
        logger.debug(
                "–û—Ç–≤–µ—Ç AI –¥–ª—è {}: {}...",
                userName,
                aiResponse.substring(0, Math.min(aiResponse.length(), 100))
        );
        return new ProcessingResult(aiResponse, true);
    } catch (Exception e) {
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Google AI: {}", e.getMessage(), e);
        return new ProcessingResult(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", true
        );
    }
}

private String enhanceMessageWithTemplate(String messageText) {
    String lower = messageText.toLowerCase();
    for (var entry : keywordTemplates.entrySet()) {
        if (lower.contains(entry.getKey())) {
            String template = entry.getValue();
            String rest = messageText.substring(lower.indexOf(entry.getKey()) + entry.getKey().length()).trim();
            return rest.isEmpty() ? template + messageText : template + rest;
        }
    }
    return messageText;
}

private ProcessingResult processCallbackQuery(Update update) {
    return new ProcessingResult("Callback query –æ–±—Ä–∞–±–æ—Ç–∞–Ω", false);
}

private boolean isMessageForBot(Message message) {
    String text = message.getText();
    if (text != null && text.contains("@")) {
        return true;
    }
    var reply = message.getReplyToMessage();
    return reply != null && reply.getFrom().getIsBot();
}

private String getUserName(Message message) {
    var from = message.getFrom();
    String first = from.getFirstName() != null ? from.getFirstName() : "";
    String last = from.getLastName() != null ? " " + from.getLastName() : "";
    if ((first + last).isBlank() && from.getUserName() != null) {
        return "@" + from.getUserName();
    }
    return (first + last).isBlank() ? "Unknown User" : first + last;
}

public static class ProcessingResult {
    private final String response;
    private final boolean shouldReply;

    public ProcessingResult(String response, boolean shouldReply) {
        this.response = response;
        this.shouldReply = shouldReply;
    }

    public String getResponse() {
        return response;
    }

    public boolean shouldReply() {
        return shouldReply;
    }
}
}
