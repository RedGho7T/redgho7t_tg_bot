package ru.redgho7t.telegrambot.service;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import ru.redgho7t.telegrambot.utils.ResponseTemplates;
import java.util.HashMap;
import java.util.Map;
import java.util.Arrays;
import java.util.List;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
 * –ó–∞–º–µ–Ω—ë–Ω PerplexityService –Ω–∞ GoogleAiService –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Gemini API.
 */
public class MessageProcessor {

    private static final Logger logger = LoggerFactory.getLogger(MessageProcessor.class);

    private final ResponseTemplates responseTemplates;
    private final Map<String, String> keywordTemplates;
    private final GoogleAiService googleAiService;

    // –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∞–∫—Ü–∏–π (–≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ)
    private static final List<String> BOT_TRIGGER_WORDS = Arrays.asList(
            "–±–æ—Ç", "–±–æ—Ç—è—Ä–∞", "bot", "botyara", "botik", "chlenix", "bobi", "botniy"
    );

    private static final List<String> POPI_TRIGGER_WORDS = Arrays.asList(
            "–ø–æ–ø–∏", "popi", "–ø—É–ø—Å—Ç–µ—Ä—Å", "–ø–æ–ø–∏–∫—Å", "–ø–æ–ø–∞"
    );

    private static final List<String> JAVA_TRIGGER_WORDS = Arrays.asList(
            "java", "jabi"
    );

    private static final List<String> GO_TRIGGER_WORDS = Arrays.asList(
            "go", "–≥–æ", "–≥–æ—É"
    );
    private static final List<String> JABI_TRIGGER_WORDS = Arrays.asList(
            "jabi", "JABI","–∂–∞–±–∏","jabbi","JABA","–ñ–ê–ë–ò"
    );

    /**
     * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π.
     *
     * @param googleAiService —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Gemini AI
     */
    public MessageProcessor(GoogleAiService googleAiService) {
        this.googleAiService = googleAiService;
        this.responseTemplates = new ResponseTemplates();
        this.keywordTemplates = initializeKeywordTemplates();
        logger.info("MessageProcessor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å GoogleAiService");
    }

    private Map<String, String> initializeKeywordTemplates() {
        Map<String, String> templates = new HashMap<>();
        templates.put("–ø—Ä–∏–≤–µ—Ç", "–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç AI Bot. –†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ: ");
        templates.put("hello", "Hello! I'm AI Bot. Tell me: ");
        templates.put("–ø–æ–º–æ—â—å", "–ö–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å —Å –≤–æ–ø—Ä–æ—Å–æ–º: ");
        templates.put("help", "How can I help you with: ");
        templates.put("–Ω–∞–π–¥–∏", "–ù–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ: ");
        templates.put("search", "Search for information about: ");
        templates.put("—á—Ç–æ —Ç–∞–∫–æ–µ", "–ß—Ç–æ —Ç–∞–∫–æ–µ ");
        templates.put("what is", "What is ");
        templates.put("–æ–±—ä—è—Å–Ω–∏", "–û–±—ä—è—Å–Ω–∏ ");
        templates.put("explain", "Explain ");
        templates.put("—Ä–∞—Å—Å–∫–∞–∂–∏", "–†–∞—Å—Å–∫–∞–∂–∏ –æ ");
        templates.put("tell me", "Tell me about ");
        templates.put("—Å—Ä–∞–≤–Ω–∏", "–°—Ä–∞–≤–Ω–∏ ");
        templates.put("compare", "Compare ");
        templates.put("—Ä–∞–∑–Ω–∏—Ü–∞", "–í —á–µ–º —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É ");
        templates.put("difference", "What's the difference between ");
        return templates;
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (—Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ callback).
     */
    public ProcessingResult processUpdate(Update update) {
        try {
            if (update.hasMessage()) {
                return processMessage(update.getMessage());
            } else if (update.hasCallbackQuery()) {
                return processCallbackQuery(update.getCallbackQuery());
            }
            return new ProcessingResult("", false);
        } catch (Exception e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {}", e.getMessage(), e);
            return new ProcessingResult("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.", true);
        }
    }

    private ProcessingResult processMessage(Message message) {
        String messageText = message.getText();
        if (messageText == null || messageText.trim().isEmpty()) {
            return new ProcessingResult("", false);
        }

        Long chatId = message.getChatId();
        String userName = getUserName(message);
        boolean isGroup = message.getChat().isGroupChat() || message.getChat().isSuperGroupChat();

        logger.info("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {}: {}", userName, messageText);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã –ø–µ—Ä–≤—ã–º–∏
        if (messageText.startsWith("/")) {
            return processCommand(messageText, chatId, isGroup);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        ProcessingResult specialResponse = checkSpecialKeywords(messageText);
        if (specialResponse != null) {
            return specialResponse;
        }

        // –î–ª—è –≥—Ä—É–ø–ø –ø—Ä–æ–≤–µ—Ä—è–µ–º, –æ–±—Ä–∞—â–∞—é—Ç—Å—è –ª–∏ –∫ –±–æ—Ç—É
        if (isGroup && !isMessageForBot(message)) {
            return new ProcessingResult("", false);
        }

        return processUserMessage(messageText, userName);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ—Ç–≤–µ—Ç
     */
    private ProcessingResult checkSpecialKeywords(String messageText) {
        // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–ª–æ–≤–∞: –≤—Å–µ –ø–æ–¥—Ä—è–¥ non-letters –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
        String[] tokens = messageText
                .toLowerCase()
                .split("[^\\p{L}]+");  // \p{L} ‚Äî –ª—é–±–∞—è –±—É–∫–≤–∞ Unicode

        for (String token : tokens) {
            // –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –±–æ—Ç—É
            if (BOT_TRIGGER_WORDS.contains(token)) {
                return new ProcessingResult(responseTemplates.getBotResponseMessage(), true, false);
            }
            // –ø–æ–ø–∏
            if (POPI_TRIGGER_WORDS.contains(token)) {
                return new ProcessingResult(responseTemplates.getPopiMessage(), true, false);
            }
            for (String trigger : JABI_TRIGGER_WORDS) {
                if (Arrays.asList(tokens).contains(trigger)) {
                    logger.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ JABI: {}", trigger);
                    return new ProcessingResult(responseTemplates.getJabiMessage(), true, false);
                }
            }
            // Java
            if (JAVA_TRIGGER_WORDS.contains(token)) {
                return new ProcessingResult(responseTemplates.getJavaMessage(), true, false);
            }
            // Go
            if (GO_TRIGGER_WORDS.contains(token)) {
                return new ProcessingResult(responseTemplates.getGoMessage(), true, false);
            }
        }
        return null;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–æ–≤–æ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ (–Ω–µ —á–∞—Å—Ç—å –¥—Ä—É–≥–æ–≥–æ —Å–ª–æ–≤–∞)
     */
    private boolean containsWord(String text, String word) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ü–µ–ª–æ–≥–æ —Å–ª–æ–≤–∞
        String pattern = "\\b" + word.toLowerCase() + "\\b";
        return text.matches(".*" + pattern + ".*");
    }

    private ProcessingResult processCommand(String command, Long chatId, boolean isGroup) {
        // –£–±–∏—Ä–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        String cmdPart = command.toLowerCase().split("\\s+")[0];
        // –û–±—Ä–µ–∑–∞–µ–º —Å—É—Ñ—Ñ–∏–∫—Å –≤–∏–¥–∞ @botusername
        String cmd = cmdPart.contains("@") ? cmdPart.substring(0, cmdPart.indexOf("@")) : cmdPart;
        return switch (cmd) {
            case "/start"  -> new ProcessingResult(responseTemplates.getMainMenuMessage(), true, false);
            case "/help"   -> new ProcessingResult(responseTemplates.getHelpMessage(), true, false);
            case "/about"  -> new ProcessingResult(responseTemplates.getAboutMessage(), true, false);
            case "/status" -> processStatusCommand();
            case "/models" -> new ProcessingResult(responseTemplates.getModelsMessage(), true, false);
            default        -> {
                if (isGroup) {
                    yield new ProcessingResult("", false);
                } else {
                    yield new ProcessingResult(
                            "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.", true, false
                    );
                }
            }
        };
    }

    private ProcessingResult processStatusCommand() {
        boolean isAvailable = googleAiService.isApiAvailable();
        String status = isAvailable ? "‚úÖ –û–Ω–ª–∞–π–Ω" : "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω";
        String message = String.format(
                "ü§ñ **–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:**\n\nAI API: %s\n–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: –∞–∫—Ç–∏–≤–µ–Ω\n–í–µ—Ä—Å–∏—è: 1.0.0", status
        );
        return new ProcessingResult(message, true, false);
    }

    private ProcessingResult processUserMessage(String messageText, String userName) {
        String enhanced = enhanceMessageWithTemplate(messageText);
        try {
            String aiResponse = googleAiService.sendRequest(enhanced);
            logger.debug("–û—Ç–≤–µ—Ç AI –¥–ª—è {}: {}...", userName,
                    aiResponse.substring(0, Math.min(aiResponse.length(), 100)));
            return new ProcessingResult(aiResponse, true, false);
        } catch (Exception e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Google AI: {}", e.getMessage(), e);
            return new ProcessingResult("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", true, false);
        }
    }

    private String enhanceMessageWithTemplate(String messageText) {
        String lower = messageText.toLowerCase();
        for (var entry : keywordTemplates.entrySet()) {
            if (lower.contains(entry.getKey())) {
                String template = entry.getValue();
                String rest = messageText.substring(lower.indexOf(entry.getKey())
                        + entry.getKey().length()).trim();
                return rest.isEmpty() ? template + messageText : template + rest;
            }
        }
        return messageText;
    }

    private ProcessingResult processCallbackQuery(CallbackQuery callbackQuery) {
        String data = callbackQuery.getData();
        logger.info("–ü–æ–ª—É—á–µ–Ω callback: {}", data);

        return switch (data) {
            case "cmd_about"    -> new ProcessingResult(responseTemplates.getAboutMessage(), true, false);
            case "cmd_help"     -> new ProcessingResult(responseTemplates.getHelpMessage(), true, false);
            case "cmd_status"   -> processStatusCommand();
            case "cmd_models"   -> new ProcessingResult(responseTemplates.getModelsMessage(), true, false);
            case "info_creator" -> new ProcessingResult(responseTemplates.getCreatorInfoMessage(), true, true);
            case "back_main"    -> new ProcessingResult(responseTemplates.getBackToMainMessage(), true, false);
            default             -> new ProcessingResult("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", true, false);
        };
    }

    private boolean isMessageForBot(Message message) {
        String text = message.getText();
        if (text != null && text.contains("@")) {
            return true;
        }
        var reply = message.getReplyToMessage();
        return reply != null && reply.getFrom().getIsBot();
    }

    private String getUserName(Message message) {
        var from = message.getFrom();
        String first = from.getFirstName()  != null ? from.getFirstName()  : "";
        String last  = from.getLastName()   != null ? " " + from.getLastName() : "";
        if ((first + last).isBlank() && from.getUserName() != null) {
            return "@" + from.getUserName();
        }
        return (first + last).isBlank() ? "Unknown User" : first + last;
    }

    public static class ProcessingResult {
        private final String response;
        private final boolean shouldReply;
        private final boolean showCreatorKeyboard;

        public ProcessingResult(String response, boolean shouldReply) {
            this(response, shouldReply, false);
        }

        public ProcessingResult(String response, boolean shouldReply, boolean showCreatorKeyboard) {
            this.response = response;
            this.shouldReply = shouldReply;
            this.showCreatorKeyboard = showCreatorKeyboard;
        }

        public String getResponse() { return response; }
        public boolean shouldReply() { return shouldReply; }
        public boolean shouldShowCreatorKeyboard() { return showCreatorKeyboard; }
    }
}
