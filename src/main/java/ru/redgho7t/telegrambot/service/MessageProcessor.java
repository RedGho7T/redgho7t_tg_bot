package ru.redgho7t.telegrambot.service;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import ru.redgho7t.telegrambot.utils.ResponseTemplates;

import java.util.HashMap;
import java.util.Map;
import java.util.Arrays;
import java.util.List;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
 * –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω @Service –¥–ª—è —Ä–∞–±–æ—Ç—ã Spring DI
 */
@Service
public class MessageProcessor {
    private static final Logger logger = LoggerFactory.getLogger(MessageProcessor.class);

    private final ResponseTemplates responseTemplates;
    private final Map<String, String> keywordTemplates;
    private final GoogleAiService googleAiService;

    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–Ω—ä–µ–∫—Ü–∏—è —á–µ—Ä–µ–∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –≤–º–µ—Å—Ç–æ @Autowired –ø–æ–ª–µ–π
    private final JokeService jokeService;
    private final WeatherService weatherService;
    private final HoroscopeService horoscopeService;
    private final RouletteService rouletteService;

    // –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∞–∫—Ü–∏–π (–≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ)
    private static final List<String> BOT_TRIGGER_WORDS = Arrays.asList(
            "–±–æ—Ç", "–±–æ—Ç—è—Ä–∞", "bot", "botyara", "botik", "chlenix", "bobi", "botniy"
    );

    private static final List<String> POPI_TRIGGER_WORDS = Arrays.asList(
            "–ø–æ–ø–∏", "popi", "–ø—É–ø—Å—Ç–µ—Ä—Å", "–ø–æ–ø–∏–∫—Å", "–ø–æ–ø–∞"
    );

    private static final List<String> JAVA_TRIGGER_WORDS = Arrays.asList(
            "java", "jabi"
    );

    private static final List<String> GO_TRIGGER_WORDS = Arrays.asList(
            "go", "–≥–æ", "–≥–æ—É"
    );

    private static final List<String> JABI_TRIGGER_WORDS = Arrays.asList(
            "jabi", "JABI", "–∂–∞–±–∏", "jabbi", "JABA", "–ñ–ê–ë–ò"
    );

    // –ù–û–í–´–ï –ö–õ–Æ–ß–ï–í–´–ï –°–õ–û–í–ê –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
    private static final List<String> JOKE_TRIGGER_WORDS = Arrays.asList(
            "–∞–Ω–µ–∫–¥–æ—Ç", "—à—É—Ç–∫–∞", "–ø—Ä–∏–∫–æ–ª", "joke", "—é–º–æ—Ä", "—Å–º–µ—à–Ω–æ–µ", "—Ä–∞—Å—Å–º–µ—à–∏"
    );

    private static final List<String> WEATHER_TRIGGER_WORDS = Arrays.asList(
            "–ø–æ–≥–æ–¥–∞", "weather", "–ø—Ä–æ–≥–Ω–æ–∑", "—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", "–¥–æ–∂–¥—å", "—Å–Ω–µ–≥", "—Å–æ–ª–Ω—Ü–µ"
    );

    private static final List<String> HOROSCOPE_TRIGGER_WORDS = Arrays.asList(
            "–≥–æ—Ä–æ—Å–∫–æ–ø", "horoscope", "–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ", "–∑–æ–¥–∏–∞–∫", "–∑–Ω–∞–∫", "–∞—Å—Ç—Ä–æ–ª–æ–≥–∏—è",
            "–æ–≤–µ–Ω", "—Ç–µ–ª–µ—Ü", "–±–ª–∏–∑–Ω–µ—Ü—ã", "—Ä–∞–∫", "–ª–µ–≤", "–¥–µ–≤–∞", "–≤–µ—Å—ã",
            "—Å–∫–æ—Ä–ø–∏–æ–Ω", "—Å—Ç—Ä–µ–ª–µ—Ü", "–∫–æ–∑–µ—Ä–æ–≥", "–≤–æ–¥–æ–ª–µ–π", "—Ä—ã–±—ã"
    );

    private static final List<String> ROULETTE_TRIGGER_WORDS = Arrays.asList(
            "lucky", "—Ä—É–ª–µ—Ç–∫–∞", "—É–¥–∞—á–∞", "–≤–µ–∑–µ–Ω–∏–µ", "–ª–æ—Ç–µ—Ä–µ—è", "—Å–ª—É—á–∞–π–Ω–æ–µ", "—á–∏—Å–ª–æ", "—Ñ–æ—Ä—Ç—É–Ω–∞"
    );

    /**
     * –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ö–û–ù–°–¢–†–£–ö–¢–û–† —Å –∏–Ω—ä–µ–∫—Ü–∏–µ–π –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
     */
    @Autowired
    public MessageProcessor(GoogleAiService googleAiService,
                            JokeService jokeService,
                            WeatherService weatherService,
                            HoroscopeService horoscopeService,
                            RouletteService rouletteService) {
        this.googleAiService = googleAiService;
        this.jokeService = jokeService;
        this.weatherService = weatherService;
        this.horoscopeService = horoscopeService;
        this.rouletteService = rouletteService;

        this.responseTemplates = new ResponseTemplates();
        this.keywordTemplates = initializeKeywordTemplates();

        logger.info("‚úÖ MessageProcessor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å–æ –≤—Å–µ–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏");
    }

    private Map<String, String> initializeKeywordTemplates() {
        Map<String, String> templates = new HashMap<>();
        templates.put("–ø—Ä–∏–≤–µ—Ç", "–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç AI Bot. –†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ: ");
        templates.put("hello", "Hello! I'm AI Bot. Tell me: ");
        templates.put("–ø–æ–º–æ—â—å", "–ö–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å —Å –≤–æ–ø—Ä–æ—Å–æ–º: ");
        templates.put("help", "How can I help you with: ");
        templates.put("–Ω–∞–π–¥–∏", "–ù–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ: ");
        templates.put("search", "Search for information about: ");
        templates.put("—á—Ç–æ —Ç–∞–∫–æ–µ", "–ß—Ç–æ —Ç–∞–∫–æ–µ ");
        templates.put("what is", "What is ");
        templates.put("–æ–±—ä—è—Å–Ω–∏", "–û–±—ä—è—Å–Ω–∏ ");
        templates.put("explain", "Explain ");
        templates.put("—Ä–∞—Å—Å–∫–∞–∂–∏", "–†–∞—Å—Å–∫–∞–∂–∏ –æ ");
        templates.put("tell me", "Tell me about ");
        templates.put("—Å—Ä–∞–≤–Ω–∏", "–°—Ä–∞–≤–Ω–∏ ");
        templates.put("compare", "Compare ");
        templates.put("—Ä–∞–∑–Ω–∏—Ü–∞", "–í —á–µ–º —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É ");
        templates.put("difference", "What's the difference between ");
        return templates;
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (—Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ callback).
     */
    public ProcessingResult processUpdate(Update update) {
        try {
            if (update.hasMessage()) {
                return processMessage(update.getMessage());
            } else if (update.hasCallbackQuery()) {
                return processCallbackQuery(update.getCallbackQuery());
            }

            return new ProcessingResult("", false);
        } catch (Exception e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {}", e.getMessage(), e);
            return new ProcessingResult("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.", true);
        }
    }

    private ProcessingResult processMessage(Message message) {
        String messageText = message.getText();
        if (messageText == null || messageText.trim().isEmpty()) {
            return new ProcessingResult("", false);
        }

        Long chatId = message.getChatId();
        String userName = getUserName(message);
        boolean isGroup = message.getChat().isGroupChat() || message.getChat().isSuperGroupChat();

        logger.info("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {}: {}", userName, messageText);

        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã –ø–µ—Ä–≤—ã–º–∏
        if (messageText.startsWith("/")) {
            return processCommand(messageText, chatId, isGroup);
        }

        // 2. –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ü–ï–†–ï–î —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
        ProcessingResult newFunctionResult = checkNewFunctions(messageText);
        if (newFunctionResult != null) {
            return newFunctionResult;
        }

        // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        ProcessingResult specialResponse = checkSpecialKeywords(messageText);
        if (specialResponse != null) {
            return specialResponse;
        }

        // 4. –î–ª—è –≥—Ä—É–ø–ø –ø—Ä–æ–≤–µ—Ä—è–µ–º, –æ–±—Ä–∞—â–∞—é—Ç—Å—è –ª–∏ –∫ –±–æ—Ç—É
        if (isGroup && !isMessageForBot(message)) {
            return new ProcessingResult("", false);
        }

        // 5. AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∫–∞–∫ fallback
        return processUserMessage(messageText, userName);
    }

    /**
     * –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–∞–Ω–µ–∫–¥–æ—Ç—ã, –ø–æ–≥–æ–¥–∞, –≥–æ—Ä–æ—Å–∫–æ–ø—ã, —Ä—É–ª–µ—Ç–∫–∞)
     */
    private ProcessingResult checkNewFunctions(String messageText) {
        String[] tokens = messageText.toLowerCase().split("[^\\p{L}]+");

        for (String token : tokens) {
            // 1. –ê–ù–ï–ö–î–û–¢–´ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1)
            if (JOKE_TRIGGER_WORDS.contains(token)) {
                logger.info("üé≠ –ó–∞–ø—Ä–æ—Å –∞–Ω–µ–∫–¥–æ—Ç–∞: {}", token);
                try {
                    String joke = jokeService.getRandomJoke();
                    String response = responseTemplates.getJokeIntroMessage() + joke;
                    return new ProcessingResult(response, true, false);
                } catch (Exception e) {
                    logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–µ–∫–¥–æ—Ç–∞: {}", e.getMessage());
                    return new ProcessingResult(responseTemplates.getJokeErrorMessage(), true, false);
                }
            }

            // 2. –†–£–õ–ï–¢–ö–ê (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2)
            if (ROULETTE_TRIGGER_WORDS.contains(token)) {
                logger.info("üé∞ –ó–∞–ø—Ä–æ—Å —Ä—É–ª–µ—Ç–∫–∏: {}", token);
                try {
                    RouletteService.RouletteResult result = rouletteService.spin();
                    String response = rouletteService.formatResult(result);
                    // –£–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
                    return new ProcessingResult(response, true, false, true);
                } catch (Exception e) {
                    logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Ä—É–ª–µ—Ç–∫–∏: {}", e.getMessage());
                    return new ProcessingResult("‚ùå –†—É–ª–µ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!", true, false);
                }
            }

            // 3. –ü–û–ì–û–î–ê (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3)
            if (WEATHER_TRIGGER_WORDS.contains(token)) {
                logger.info("üå§Ô∏è –ó–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã: {}", token);
                try {
                    String weather = weatherService.getWeather();
                    return new ProcessingResult(weather, true, false);
                } catch (Exception e) {
                    logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã: {}", e.getMessage());
                    return new ProcessingResult(responseTemplates.getWeatherErrorMessage(), true, false);
                }
            }

            // 4. –ì–û–†–û–°–ö–û–ü–´ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 4)
            if (HOROSCOPE_TRIGGER_WORDS.contains(token)) {
                logger.info("üîÆ –ó–∞–ø—Ä–æ—Å –≥–æ—Ä–æ—Å–∫–æ–ø–∞: {}", token);
                try {
                    // –ï—Å–ª–∏ —ç—Ç–æ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è –Ω–µ–≥–æ
                    if (isZodiacSign(token)) {
                        String horoscope = horoscopeService.getHoroscope(token);
                        return new ProcessingResult(horoscope, true, false);
                    } else {
                        // –ò–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø
                        String horoscope = horoscopeService.getRandomHoroscope();
                        return new ProcessingResult(horoscope, true, false);
                    }
                } catch (Exception e) {
                    logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–æ—Ä–æ—Å–∫–æ–ø–∞: {}", e.getMessage());
                    return new ProcessingResult("‚ùå –ì–æ—Ä–æ—Å–∫–æ–ø –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!", true, false);
                }
            }
        }

        return null; // –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–ª–æ–≤–æ –∑–Ω–∞–∫–æ–º –∑–æ–¥–∏–∞–∫–∞
     */
    private boolean isZodiacSign(String word) {
        List<String> zodiacSigns = Arrays.asList(
                "–æ–≤–µ–Ω", "—Ç–µ–ª–µ—Ü", "–±–ª–∏–∑–Ω–µ—Ü—ã", "—Ä–∞–∫", "–ª–µ–≤", "–¥–µ–≤–∞",
                "–≤–µ—Å—ã", "—Å–∫–æ—Ä–ø–∏–æ–Ω", "—Å—Ç—Ä–µ–ª–µ—Ü", "–∫–æ–∑–µ—Ä–æ–≥", "–≤–æ–¥–æ–ª–µ–π", "—Ä—ã–±—ã"
        );
        return zodiacSigns.contains(word.toLowerCase());
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ—Ç–≤–µ—Ç
     */
    private ProcessingResult checkSpecialKeywords(String messageText) {
        // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–ª–æ–≤–∞: –≤—Å–µ –ø–æ–¥—Ä—è–¥ non-letters –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
        String[] tokens = messageText.toLowerCase().split("[^\\p{L}]+");

        for (String token : tokens) {
            // –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –±–æ—Ç—É
            if (BOT_TRIGGER_WORDS.contains(token)) {
                return new ProcessingResult(responseTemplates.getBotResponseMessage(), true, false);
            }

            // –ø–æ–ø–∏
            if (POPI_TRIGGER_WORDS.contains(token)) {
                return new ProcessingResult(responseTemplates.getPopiMessage(), true, false);
            }

            for (String trigger : JABI_TRIGGER_WORDS) {
                if (Arrays.asList(tokens).contains(trigger)) {
                    logger.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ JABI: {}", trigger);
                    return new ProcessingResult(responseTemplates.getJabiMessage(), true, false);
                }
            }

            // Java
            if (JAVA_TRIGGER_WORDS.contains(token)) {
                return new ProcessingResult(responseTemplates.getJavaMessage(), true, false);
            }

            // Go
            if (GO_TRIGGER_WORDS.contains(token)) {
                return new ProcessingResult(responseTemplates.getGoMessage(), true, false);
            }
        }
        return null;
    }

    private ProcessingResult processCommand(String command, Long chatId, boolean isGroup) {
        // –£–±–∏—Ä–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        String cmdPart = command.toLowerCase().split("\\s+")[0];
        // –û–±—Ä–µ–∑–∞–µ–º —Å—É—Ñ—Ñ–∏–∫—Å –≤–∏–¥–∞ @botusername
        String cmd = cmdPart.contains("@") ? cmdPart.substring(0, cmdPart.indexOf("@")) : cmdPart;

        return switch (cmd) {
            case "/start" -> new ProcessingResult(responseTemplates.getMainMenuMessage(), true, false);
            case "/help" -> new ProcessingResult(responseTemplates.getHelpMessage(), true, false);
            case "/about" -> new ProcessingResult(responseTemplates.getAboutMessage(), true, false);
            case "/status" -> processStatusCommand();
            case "/models" -> new ProcessingResult(responseTemplates.getModelsMessage(), true, false);

            // –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –ù–û–í–´–ï –ö–û–ú–ê–ù–î–´
            case "/joke", "/–∞–Ω–µ–∫–¥–æ—Ç" -> {
                try {
                    String joke = jokeService.getRandomJoke();
                    yield new ProcessingResult(responseTemplates.getJokeIntroMessage() + joke, true, false);
                } catch (Exception e) {
                    logger.error("‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /joke: {}", e.getMessage());
                    yield new ProcessingResult(responseTemplates.getJokeErrorMessage(), true, false);
                }
            }

            case "/weather", "/–ø–æ–≥–æ–¥–∞" -> {
                try {
                    String weather = weatherService.getWeather();
                    yield new ProcessingResult(weather, true, false);
                } catch (Exception e) {
                    logger.error("‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /weather: {}", e.getMessage());
                    yield new ProcessingResult(responseTemplates.getWeatherErrorMessage(), true, false);
                }
            }

            case "/horoscope", "/–≥–æ—Ä–æ—Å–∫–æ–ø" -> {
                try {
                    String horoscope = horoscopeService.getRandomHoroscope();
                    yield new ProcessingResult(horoscope, true, false);
                } catch (Exception e) {
                    logger.error("‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /horoscope: {}", e.getMessage());
                    yield new ProcessingResult("‚ùå –ì–æ—Ä–æ—Å–∫–æ–ø –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.", true, false);
                }
            }

            case "/lucky", "/—Ä—É–ª–µ—Ç–∫–∞" -> {
                try {
                    RouletteService.RouletteResult result = rouletteService.spin();
                    String response = rouletteService.formatResult(result);
                    yield new ProcessingResult(response, true, false, true);
                } catch (Exception e) {
                    logger.error("‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /lucky: {}", e.getMessage());
                    yield new ProcessingResult("‚ùå –†—É–ª–µ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.", true, false);
                }
            }

            default -> {
                if (isGroup) {
                    yield new ProcessingResult("", false);
                } else {
                    yield new ProcessingResult(
                            "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.", true, false
                    );
                }
            }
        };
    }

    private ProcessingResult processStatusCommand() {
        boolean isAvailable = googleAiService.isApiAvailable();
        String status = isAvailable ? "‚úÖ –û–Ω–ª–∞–π–Ω" : "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω";

        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        StringBuilder message = new StringBuilder();
        message.append(String.format("ü§ñ **–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:**\\n\\nAI API: %s\\n", status));

        // –°—Ç–∞—Ç—É—Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        message.append("\\n**–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:**\\n");
        message.append("üòÑ –ê–Ω–µ–∫–¥–æ—Ç—ã: ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω\\n");
        message.append(weatherService.getServiceStatus()).append("\\n");
        message.append(horoscopeService.getServiceStatus()).append("\\n");
        message.append("üé∞ –†—É–ª–µ—Ç–∫–∞: ‚úÖ –ê–∫—Ç–∏–≤–Ω–∞\\n");
        message.append("\\n–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: –∞–∫—Ç–∏–≤–µ–Ω\\n–í–µ—Ä—Å–∏—è: 2.0.0");

        return new ProcessingResult(message.toString(), true, false);
    }

    private ProcessingResult processUserMessage(String messageText, String userName) {
        String enhanced = enhanceMessageWithTemplate(messageText);
        try {
            String aiResponse = googleAiService.sendRequest(enhanced);
            logger.debug("–û—Ç–≤–µ—Ç AI –¥–ª—è {}: {}...", userName,
                    aiResponse.substring(0, Math.min(aiResponse.length(), 100)));
            return new ProcessingResult(aiResponse, true, false);
        } catch (Exception e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Google AI: {}", e.getMessage(), e);
            return new ProcessingResult("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", true, false);
        }
    }

    private String enhanceMessageWithTemplate(String messageText) {
        String lower = messageText.toLowerCase();

        for (var entry : keywordTemplates.entrySet()) {
            if (lower.contains(entry.getKey())) {
                String template = entry.getValue();
                String rest = messageText.substring(lower.indexOf(entry.getKey())
                        + entry.getKey().length()).trim();
                return rest.isEmpty() ? template + messageText : template + rest;
            }
        }
        return messageText;
    }

    private ProcessingResult processCallbackQuery(CallbackQuery callbackQuery) {
        String data = callbackQuery.getData();
        logger.info("–ü–æ–ª—É—á–µ–Ω callback: {}", data);

        return switch (data) {
            case "cmd_about" -> new ProcessingResult(responseTemplates.getAboutMessage(), true, false);
            case "cmd_help" -> new ProcessingResult(responseTemplates.getHelpMessage(), true, false);
            case "cmd_status" -> processStatusCommand();
            case "cmd_models" -> new ProcessingResult(responseTemplates.getModelsMessage(), true, false);
            case "info_creator" -> new ProcessingResult(responseTemplates.getCreatorInfoMessage(), true, true);
            case "back_main" -> new ProcessingResult(responseTemplates.getBackToMainMessage(), true, false);
            default -> new ProcessingResult("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", true, false);
        };
    }

    private boolean isMessageForBot(Message message) {
        String text = message.getText();
        if (text != null && text.contains("@")) {
            return true;
        }

        var reply = message.getReplyToMessage();
        return reply != null && reply.getFrom().getIsBot();
    }

    private String getUserName(Message message) {
        var from = message.getFrom();
        String first = from.getFirstName() != null ? from.getFirstName() : "";
        String last = from.getLastName() != null ? " " + from.getLastName() : "";

        if ((first + last).isBlank() && from.getUserName() != null) {
            return "@" + from.getUserName();
        }

        return (first + last).isBlank() ? "Unknown User" : first + last;
    }

    public static class ProcessingResult {
        private final String response;
        private final boolean shouldReply;
        private final boolean showCreatorKeyboard;
        private final boolean needsRouletteAnimation; // –ù–û–í–û–ï –ü–û–õ–ï

        public ProcessingResult(String response, boolean shouldReply) {
            this(response, shouldReply, false, false);
        }

        public ProcessingResult(String response, boolean shouldReply, boolean showCreatorKeyboard) {
            this(response, shouldReply, showCreatorKeyboard, false);
        }

        // –ù–û–í–´–ô –ö–û–ù–°–¢–†–£–ö–¢–û–† —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏ —Ä—É–ª–µ—Ç–∫–∏
        public ProcessingResult(String response, boolean shouldReply, boolean showCreatorKeyboard, boolean needsRouletteAnimation) {
            this.response = response;
            this.shouldReply = shouldReply;
            this.showCreatorKeyboard = showCreatorKeyboard;
            this.needsRouletteAnimation = needsRouletteAnimation;
        }

        public String getResponse() {
            return response;
        }

        public boolean shouldReply() {
            return shouldReply;
        }

        public boolean shouldShowCreatorKeyboard() {
            return showCreatorKeyboard;
        }

        public boolean needsRouletteAnimation() {
            return needsRouletteAnimation;
        } // –ù–û–í–´–ô –ì–ï–¢–¢–ï–†
    }
}