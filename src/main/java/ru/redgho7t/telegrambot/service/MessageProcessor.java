package ru.redgho7t.telegrambot.service;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import ru.redgho7t.telegrambot.utils.ResponseTemplates;

import java.util.HashMap;
import java.util.Map;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
 * –ó–∞–º–µ–Ω—ë–Ω PerplexityService –Ω–∞ GoogleAiService –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Gemini API.
 */
public class MessageProcessor {

    private static final Logger logger = LoggerFactory.getLogger(MessageProcessor.class);

    private final ResponseTemplates responseTemplates;
    private final Map<String, String> keywordTemplates;
    private final GoogleAiService googleAiService;
    private final JokeService jokeService; // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ä–≤–∏—Å –∞–Ω–µ–∫–¥–æ—Ç–æ–≤

    /**
     * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π.
     *
     * @param googleAiService —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Gemini API
     * @param jokeService —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–µ–∫–¥–æ—Ç–æ–≤
     */
    public MessageProcessor(GoogleAiService googleAiService, JokeService jokeService) {
        this.googleAiService = googleAiService;
        this.jokeService = jokeService;
        this.responseTemplates = new ResponseTemplates();
        this.keywordTemplates = initializeKeywordTemplates();
        logger.info("MessageProcessor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å GoogleAiService –∏ JokeService");
    }

    private Map<String, String> initializeKeywordTemplates() {
        Map<String, String> templates = new HashMap<>();
        templates.put("–ø—Ä–∏–≤–µ—Ç", "–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç AI Bot. –†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ: ");
        templates.put("hello", "Hello! I'm AI Bot. Tell me: ");
        templates.put("–ø–æ–º–æ—â—å", "–ö–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å —Å –≤–æ–ø—Ä–æ—Å–æ–º: ");
        templates.put("help", "How can I help you with: ");
        templates.put("–Ω–∞–π–¥–∏", "–ù–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ: ");
        templates.put("search", "Search for information about: ");
        templates.put("—á—Ç–æ —Ç–∞–∫–æ–µ", "–ß—Ç–æ —Ç–∞–∫–æ–µ ");
        templates.put("what is", "What is ");
        templates.put("–æ–±—ä—è—Å–Ω–∏", "–û–±—ä—è—Å–Ω–∏ ");
        templates.put("explain", "Explain ");
        templates.put("—Ä–∞—Å—Å–∫–∞–∂–∏", "–†–∞—Å—Å–∫–∞–∂–∏ –æ ");
        templates.put("tell me", "Tell me about ");
        templates.put("—Å—Ä–∞–≤–Ω–∏", "–°—Ä–∞–≤–Ω–∏ ");
        templates.put("compare", "Compare ");
        templates.put("—Ä–∞–∑–Ω–∏—Ü–∞", "–í —á–µ–º —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É ");
        templates.put("difference", "What's the difference between ");

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∞–Ω–µ–∫–¥–æ—Ç–æ–≤
        templates.put("–∞–Ω–µ–∫–¥–æ—Ç", "ü§£ –ê–Ω–µ–∫–¥–æ—Ç –¥–ª—è –ø–æ–¥–Ω—è—Ç–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è:");
        templates.put("—à—É—Ç–∫–∞", "üòÑ –í–æ—Ç –∑–∞–±–∞–≤–Ω–∞—è —à—É—Ç–∫–∞:");
        templates.put("—Ä–∞—Å—Å–∫–∞–∂–∏ –∞–Ω–µ–∫–¥–æ—Ç", "üé≠ –î–µ—Ä–∂–∏ –∞–Ω–µ–∫–¥–æ—Ç:");
        templates.put("joke", "üòÇ Here's a joke for you:");
        templates.put("tell me a joke", "ü§£ Here's a funny one:");

        return templates;
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (—Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ callback).
     */
    public ProcessingResult processUpdate(Update update) {
        try {
            if (update.hasMessage()) {
                return processMessage(update.getMessage());
            } else if (update.hasCallbackQuery()) {
                return processCallbackQuery(update.getCallbackQuery());
            }

            return new ProcessingResult("", false);
        } catch (Exception e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {}", e.getMessage(), e);
            return new ProcessingResult("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.", true);
        }
    }

    private ProcessingResult processMessage(Message message) {
        String messageText = message.getText();
        if (messageText == null || messageText.trim().isEmpty()) {
            return new ProcessingResult("", false);
        }

        Long chatId = message.getChatId();
        String userName = getUserName(message);
        boolean isGroup = message.getChat().isGroupChat() || message.getChat().isSuperGroupChat();

        logger.info("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {}: {}", userName, messageText);

        if (messageText.startsWith("/")) {
            return processCommand(messageText, chatId, isGroup);
        }

        if (isGroup && !isMessageForBot(message)) {
            return new ProcessingResult("", false);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∞–Ω–µ–∫–¥–æ—Ç–æ–≤ –ü–ï–†–ï–î –æ–±—Ä–∞–±–æ—Ç–∫–æ–π AI
        if (isJokeRequest(messageText)) {
            return processJokeRequest(messageText);
        }

        return processUserMessage(messageText, userName);
    }

    private ProcessingResult processCommand(String command, Long chatId, boolean isGroup) {
        String cmd = command.toLowerCase().split("\\s+")[0];
        return switch (cmd) {
            case "/start" -> new ProcessingResult(responseTemplates.getMainMenuMessage(), true, false);
            case "/help" -> new ProcessingResult(responseTemplates.getHelpMessage(), true, false);
            case "/about" -> new ProcessingResult(responseTemplates.getAboutMessage(), true, false);
            case "/status" -> processStatusCommand();
            case "/models" -> new ProcessingResult(responseTemplates.getModelsMessage(), true, false);
            case "/joke", "/–∞–Ω–µ–∫–¥–æ—Ç" -> processJokeCommand(); // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–Ω–µ–∫–¥–æ—Ç–æ–≤
            default -> {
                if (isGroup) {
                    yield new ProcessingResult("", false);
                } else {
                    yield new ProcessingResult(
                            "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.", true, false
                    );
                }
            }
        };
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–µ–∫–¥–æ—Ç–∞
     */
    private ProcessingResult processJokeCommand() {
        try {
            String joke = jokeService.getRandomJoke();
            String response = "üé≠ **–ê–Ω–µ–∫–¥–æ—Ç –¥–Ω—è:**\n\n" + joke + "\n\nüòÑ –ù–∞–¥–µ—é—Å—å, –ø–æ–¥–Ω—è–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ!";
            logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–Ω–µ–∫–¥–æ—Ç –ø–æ –∫–æ–º–∞–Ω–¥–µ");
            return new ProcessingResult(response, true, false);
        } catch (Exception e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–µ–∫–¥–æ—Ç–∞: {}", e.getMessage(), e);
            return new ProcessingResult("‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–µ–∫–¥–æ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", true, false);
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ –∞–Ω–µ–∫–¥–æ—Ç
     */
    private boolean isJokeRequest(String messageText) {
        String lowerText = messageText.toLowerCase().trim();

        // –¢–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        if (lowerText.equals("–∞–Ω–µ–∫–¥–æ—Ç") || lowerText.equals("—à—É—Ç–∫–∞") ||
                lowerText.equals("joke") || lowerText.equals("–∞–Ω–µ–∫–¥–æ—Ç–∏–∫")) {
            return true;
        }

        // –§—Ä–∞–∑—ã —Å –∑–∞–ø—Ä–æ—Å–æ–º –∞–Ω–µ–∫–¥–æ—Ç–∞
        String[] jokePatterns = {
                "—Ä–∞—Å—Å–∫–∞–∂–∏ –∞–Ω–µ–∫–¥–æ—Ç", "—Ä–∞—Å—Å–∫–∞–∂–∏ —à—É—Ç–∫—É", "–¥–∞–≤–∞–π –∞–Ω–µ–∫–¥–æ—Ç",
                "—Ö–æ—á—É –∞–Ω–µ–∫–¥–æ—Ç", "–¥–∞–π –∞–Ω–µ–∫–¥–æ—Ç", "–ø–æ–∫–∞–∂–∏ –∞–Ω–µ–∫–¥–æ—Ç",
                "tell me a joke", "tell a joke", "give me a joke",
                "–∞–Ω–µ–∫–¥–æ—Ç –ø–ª–∑", "–∞–Ω–µ–∫–¥–æ—Ç –ø–æ–∂–∞–ª—É–π—Å—Ç–∞", "—à—É—Ç–∫—É –ø–æ–∂–∞–ª—É–π—Å—Ç–∞"
        };

        for (String pattern : jokePatterns) {
            if (lowerText.contains(pattern)) {
                return true;
            }
        }

        return false;
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–µ–∫–¥–æ—Ç
     */
    private ProcessingResult processJokeRequest(String messageText) {
        try {
            String joke = jokeService.getRandomJoke();
            String template = getJokeTemplate(messageText.toLowerCase());
            String response = template + "\n\n" + joke + "\n\nüòä –•–æ—Ç–∏—Ç–µ –µ—â—ë? –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ \"–∞–Ω–µ–∫–¥–æ—Ç\"!";

            logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–Ω–µ–∫–¥–æ—Ç –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É");
            return new ProcessingResult(response, true, false);
        } catch (Exception e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–µ–∫–¥–æ—Ç–∞ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É: {}", e.getMessage(), e);
            return new ProcessingResult("‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–µ–∫–¥–æ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", true, false);
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–π —à–∞–±–ª–æ–Ω –¥–ª—è –∞–Ω–µ–∫–¥–æ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–∞–ø—Ä–æ—Å–∞
     */
    private String getJokeTemplate(String messageText) {
        if (messageText.contains("joke")) {
            return "üòÇ Here's a joke for you:";
        } else if (messageText.contains("—à—É—Ç–∫")) {
            return "üòÑ –í–æ—Ç –∑–∞–±–∞–≤–Ω–∞—è —à—É—Ç–∫–∞:";
        } else {
            return "üé≠ –î–µ—Ä–∂–∏ –∞–Ω–µ–∫–¥–æ—Ç:";
        }
    }

    private ProcessingResult processStatusCommand() {
        boolean isAvailable = googleAiService.isApiAvailable();
        boolean jokeServiceAvailable = jokeService.isServiceAvailable();
        String status = isAvailable ? "‚úÖ –û–Ω–ª–∞–π–Ω" : "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω";
        String jokeStatus = jokeServiceAvailable ? "‚úÖ –û–Ω–ª–∞–π–Ω" : "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω";

        String message = String.format(
                "ü§ñ **–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:**\n\nAI API: %s\n–°–µ—Ä–≤–∏—Å –∞–Ω–µ–∫–¥–æ—Ç–æ–≤: %s\n–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: –∞–∫—Ç–∏–≤–µ–Ω\n–í–µ—Ä—Å–∏—è: 1.0.0",
                status, jokeStatus
        );
        return new ProcessingResult(message, true, false);
    }

    private ProcessingResult processUserMessage(String messageText, String userName) {
        String enhanced = enhanceMessageWithTemplate(messageText);
        try {
            String aiResponse = googleAiService.sendRequest(enhanced);
            logger.debug("–û—Ç–≤–µ—Ç AI –¥–ª—è {}: {}...", userName,
                    aiResponse.substring(0, Math.min(aiResponse.length(), 100)));
            return new ProcessingResult(aiResponse, true, false);
        } catch (Exception e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Google AI: {}", e.getMessage(), e);
            return new ProcessingResult("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", true, false);
        }
    }

    private String enhanceMessageWithTemplate(String messageText) {
        String lower = messageText.toLowerCase();
        for (var entry : keywordTemplates.entrySet()) {
            if (lower.contains(entry.getKey())) {
                String template = entry.getValue();
                String rest = messageText.substring(lower.indexOf(entry.getKey())
                        + entry.getKey().length()).trim();
                return rest.isEmpty() ? template + messageText : template + rest;
            }
        }
        return messageText;
    }

    private ProcessingResult processCallbackQuery(CallbackQuery callbackQuery) {
        String data = callbackQuery.getData();
        logger.info("–ü–æ–ª—É—á–µ–Ω callback: {}", data);
        return switch (data) {
            case "cmd_about" -> new ProcessingResult(responseTemplates.getAboutMessage(), true, false);
            case "cmd_help" -> new ProcessingResult(responseTemplates.getHelpMessage(), true, false);
            case "cmd_status" -> processStatusCommand();
            case "cmd_models" -> new ProcessingResult(responseTemplates.getModelsMessage(), true, false);
            case "info_creator" -> new ProcessingResult(responseTemplates.getCreatorInfoMessage(), true, true);
            case "back_main" -> new ProcessingResult(responseTemplates.getBackToMainMessage(), true, false);
            case "cmd_joke" -> processJokeCommand(); // –î–æ–±–∞–≤–ª—è–µ–º callback –¥–ª—è –∞–Ω–µ–∫–¥–æ—Ç–æ–≤
            default -> new ProcessingResult("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", true, false);
        };
    }

    private boolean isMessageForBot(Message message) {
        String text = message.getText();
        if (text != null && text.contains("@")) {
            return true;
        }

        var reply = message.getReplyToMessage();
        return reply != null && reply.getFrom().getIsBot();
    }

    private String getUserName(Message message) {
        var from = message.getFrom();
        String first = from.getFirstName() != null ? from.getFirstName() : "";
        String last = from.getLastName() != null ? " " + from.getLastName() : "";
        if ((first + last).isBlank() && from.getUserName() != null) {
            return "@" + from.getUserName();
        }

        return (first + last).isBlank() ? "Unknown User" : first + last;
    }

    public static class ProcessingResult {
        private final String response;
        private final boolean shouldReply;
        private final boolean showCreatorKeyboard;

        public ProcessingResult(String response, boolean shouldReply) {
            this(response, shouldReply, false);
        }

        public ProcessingResult(String response, boolean shouldReply, boolean showCreatorKeyboard) {
            this.response = response;
            this.shouldReply = shouldReply;
            this.showCreatorKeyboard = showCreatorKeyboard;
        }

        public String getResponse() { return response; }
        public boolean shouldReply() { return shouldReply; }
        public boolean shouldShowCreatorKeyboard() { return showCreatorKeyboard; }
    }
}