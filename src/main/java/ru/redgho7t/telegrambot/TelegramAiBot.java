package ru.redgho7t.telegrambot;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.AnswerCallbackQuery;
import org.telegram.telegrambots.meta.api.methods.send.SendDice;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import ru.redgho7t.telegrambot.config.BotConfig;
import ru.redgho7t.telegrambot.entity.MessageLog.MessageType;
import ru.redgho7t.telegrambot.service.DatabaseService;
import ru.redgho7t.telegrambot.service.GoogleAiService;
import ru.redgho7t.telegrambot.service.MessageProcessor;
import ru.redgho7t.telegrambot.utils.KeyboardFactory;
import ru.redgho7t.telegrambot.utils.MessageSplitter;

import java.util.List;

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram AI Bot —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 * –û–ë–ù–û–í–õ–Å–ù: –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ —Ä—É–ª–µ—Ç–∫–∏ —á–µ—Ä–µ–∑ Dice API
 */
@Component
public class TelegramAiBot extends TelegramLongPollingBot {
    private static final Logger logger = LoggerFactory.getLogger(TelegramAiBot.class);
    private static final int MESSAGE_DELAY = 200; // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –≤ –º—Å
    private static final int ROULETTE_ANIMATION_DELAY = 4000; // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ —Ä—É–ª–µ—Ç–∫–∏

    private final BotConfig config;
    private final MessageProcessor messageProcessor;
    private final DatabaseService databaseService;

    @Autowired
    public TelegramAiBot(BotConfig config, DatabaseService databaseService) {
        this.config = config;
        this.databaseService = databaseService;

        // –ü–æ–ª—É—á–∞–µ–º Google API –∫–ª—é—á –∏–∑ BotConfig
        String googleKey = config.getGoogleApiKey();

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è Google Gemini API
        GoogleAiService googleAiService = new GoogleAiService(googleKey);

        // –ü–µ—Ä–µ–¥–∞—ë–º —Å–µ—Ä–≤–∏—Å –≤ MessageProcessor
        this.messageProcessor = new MessageProcessor(googleAiService);

        logger.info("ü§ñ TelegramAiBot v2.0 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è @{} —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ë–î –∏ –Ω–æ–≤—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏",
                config.getBotUsername());

        // –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config.logConfiguration();
    }

    @Override
    public String getBotToken() {
        return config.getBotToken();
    }

    @Override
    public String getBotUsername() {
        return config.getBotUsername();
    }

    @Override
    public void onUpdateReceived(Update update) {
        // –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        long startTime = System.currentTimeMillis();
        try {
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback –∑–∞–ø—Ä–æ—Å—ã (–Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏)
            if (update.hasCallbackQuery()) {
                handleCallbackQuery(update, startTime);
                return;
            }

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if (update.hasMessage() && update.getMessage().hasText()) {
                handleTextMessage(update, startTime);
            }

        } catch (Exception e) {
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {}", e.getMessage(), e);
            try {
                Long chatId = getChatId(update);
                if (chatId != null) {
                    // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –≤ –ë–î
                    logError(update, e, startTime);
                    sendSimpleMessage(chatId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
                }
            } catch (Exception sendError) {
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {}", sendError.getMessage());
            }
        }
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –∑–∞–ø—Ä–æ—Å—ã (–Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏)
     */
    private void handleCallbackQuery(Update update, long startTime) {
        var callbackQuery = update.getCallbackQuery();
        Long chatId = callbackQuery.getMessage().getChatId();
        Long userId = callbackQuery.getFrom().getId();
        String userName = getUserDisplayName(update);
        String callbackData = callbackQuery.getData();

        logger.info("üîò Callback –æ—Ç {} –≤ —á–∞—Ç–µ {}: {}", userName, chatId, callbackData);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞–∂–∞—Ç–∏—è
        try {
            AnswerCallbackQuery answer = new AnswerCallbackQuery();
            answer.setCallbackQueryId(callbackQuery.getId());
            execute(answer);
        } catch (TelegramApiException e) {
            logger.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback: {}", e.getMessage());
        }

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback —á–µ—Ä–µ–∑ MessageProcessor
        var result = messageProcessor.processUpdate(update);
        if (result.shouldReply() && !result.getResponse().trim().isEmpty()) {
            InlineKeyboardMarkup keyboard = null;

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            if (callbackData.equals("cmd_start") || callbackData.equals("back_main")) {
                keyboard = KeyboardFactory.getMainMenuKeyboard();
            } else if (result.shouldShowCreatorKeyboard()) {
                keyboard = KeyboardFactory.getCreatorInfoKeyboard();
            }

            sendMessageWithKeyboard(chatId, result.getResponse(), keyboard);

            // –õ–æ–≥–∏—Ä—É–µ–º –≤ –ë–î
            long responseTime = System.currentTimeMillis() - startTime;
            databaseService.logMessage(
                    chatId, userId, userName,
                    "Callback: " + callbackData, result.getResponse(),
                    MessageType.CALLBACK, false, responseTime
            );
        }
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    private void handleTextMessage(Update update, long startTime) {
        Long chatId = update.getMessage().getChatId();
        Long userId = update.getMessage().getFrom().getId();
        String userName = getUserDisplayName(update);
        String messageText = update.getMessage().getText();
        boolean isGroup = update.getMessage().getChat().isGroupChat() ||
                update.getMessage().getChat().isSuperGroupChat();

        logger.info("üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {} –≤ —á–∞—Ç–µ {}: {}", userName, chatId,
                messageText.length() > 50 ? messageText.substring(0, 50) + "..." : messageText);

        var result = messageProcessor.processUpdate(update);
        if (result.shouldReply() && !result.getResponse().trim().isEmpty()) {

            // –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ —Ä—É–ª–µ—Ç–∫–∏
            if (result.needsRouletteAnimation()) {
                handleRouletteWithAnimation(chatId, result.getResponse());
            } else {
                InlineKeyboardMarkup keyboard = null;

                // –î–ª—è –∫–æ–º–∞–Ω–¥—ã /start –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                if (messageText.equals("/start") || messageText.startsWith("/start@")) {
                    keyboard = KeyboardFactory.getMainMenuKeyboard();
                }

                sendMessageWithKeyboard(chatId, result.getResponse(), keyboard);
            }

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            MessageType messageType;
            if (messageText.startsWith("/")) {
                messageType = MessageType.COMMAND;
            } else if (containsSpecialKeyword(messageText)) {
                messageType = MessageType.SPECIAL_KEYWORD;
            } else {
                messageType = MessageType.AI_REQUEST;
            }

            // –õ–æ–≥–∏—Ä—É–µ–º –≤ –ë–î
            long responseTime = System.currentTimeMillis() - startTime;
            databaseService.logMessage(
                    chatId, userId, userName,
                    messageText, result.getResponse(),
                    messageType, isGroup, responseTime
            );
        }
    }

    /**
     * –ù–û–í–´–ô –ú–ï–¢–û–î: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä—É–ª–µ—Ç–∫—É —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
     */
    private void handleRouletteWithAnimation(Long chatId, String finalMessage) {
        try {
            // 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ —Ä—É–ª–µ—Ç–∫–∏
            sendSimpleMessage(chatId, "üé∞ **–ó–∞–ø—É—Å–∫–∞–µ–º —Ä—É–ª–µ—Ç–∫—É —É–¥–∞—á–∏!**\n\n–ö—Ä—É—Ç–∏–º... üé≤");

            // 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã
            SendDice sendDice = new SendDice();
            sendDice.setChatId(chatId.toString());
            sendDice.setEmoji("üé∞"); // –≠–º–æ–¥–∑–∏ —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
            execute(sendDice);

            // 3. –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
            Thread.sleep(ROULETTE_ANIMATION_DELAY);

            // 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            sendSimpleMessage(chatId, finalMessage);

            logger.info("üé∞ –†—É–ª–µ—Ç–∫–∞ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è —á–∞—Ç–∞ {}", chatId);

        } catch (TelegramApiException e) {
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–Ω–∏–º–∞—Ü–∏–∏ —Ä—É–ª–µ—Ç–∫–∏: {}", e.getMessage());
            // Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–µ–∑ –∞–Ω–∏–º–∞—Ü–∏–∏
            sendSimpleMessage(chatId, finalMessage);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            logger.warn("‚ö†Ô∏è –ê–Ω–∏–º–∞—Ü–∏—è —Ä—É–ª–µ—Ç–∫–∏ –±—ã–ª–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞");
            sendSimpleMessage(chatId, finalMessage);
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
     */
    private boolean containsSpecialKeyword(String messageText) {
        String lowerText = messageText.toLowerCase();
        return lowerText.contains("–±–æ—Ç") || lowerText.contains("–±–æ—Ç—è—Ä–∞") ||
                lowerText.contains("–ø–æ–ø–∏") || lowerText.contains("java") ||
                lowerText.contains("–∂–∞–±–∏") || lowerText.contains("jabi") ||
                lowerText.contains("–≥–æ") || lowerText.contains("go") ||
                // –ù–û–í–´–ï –ö–õ–Æ–ß–ï–í–´–ï –°–õ–û–í–ê
                lowerText.contains("–∞–Ω–µ–∫–¥–æ—Ç") || lowerText.contains("—à—É—Ç–∫–∞") ||
                lowerText.contains("–ø–æ–≥–æ–¥–∞") || lowerText.contains("–ø—Ä–æ–≥–Ω–æ–∑") ||
                lowerText.contains("–≥–æ—Ä–æ—Å–∫–æ–ø") || lowerText.contains("–∑–æ–¥–∏–∞–∫") ||
                lowerText.contains("lucky") || lowerText.contains("—Ä—É–ª–µ—Ç–∫–∞");
    }

    /**
     * –õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
     */
    private void logError(Update update, Exception error, long startTime) {
        try {
            Long chatId = getChatId(update);
            Long userId = null;
            String userName = "Unknown";
            String messageText = "";
            boolean isGroup = false;

            if (update.hasMessage()) {
                userId = update.getMessage().getFrom().getId();
                userName = getUserDisplayName(update);
                messageText = update.getMessage().getText();
                isGroup = update.getMessage().getChat().isGroupChat() ||
                        update.getMessage().getChat().isSuperGroupChat();
            } else if (update.hasCallbackQuery()) {
                userId = update.getCallbackQuery().getFrom().getId();
                userName = getUserDisplayName(update);
                messageText = "Callback: " + update.getCallbackQuery().getData();
            }

            databaseService.logError(chatId, userId, userName, messageText,
                    error.getMessage(), isGroup);
        } catch (Exception e) {
            logger.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—à–∏–±–∫–∏: {}", e.getMessage());
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Ä–∞–∑–±–∏–µ–Ω–∏–µ–º –Ω–∞ —á–∞—Å—Ç–∏
     */
    private void sendMessageWithKeyboard(Long chatId, String text, InlineKeyboardMarkup keyboard) {
        List<String> messageParts = MessageSplitter.splitMessage(text);

        for (int i = 0; i < messageParts.size(); i++) {
            String part = messageParts.get(i);
            // –ö–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
            InlineKeyboardMarkup currentKeyboard = (i == messageParts.size() - 1) ? keyboard : null;

            sendTextMessage(chatId, part, currentKeyboard);

            // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
            if (i < messageParts.size() - 1) {
                try {
                    Thread.sleep(MESSAGE_DELAY);
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                    logger.warn("‚ö†Ô∏è –ü—Ä–µ—Ä–≤–∞–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π");
                    break;
                }
            }
        }

        if (messageParts.size() > 1) {
            logger.info("üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {} —á–∞—Å—Ç–µ–π —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {}", messageParts.size(), chatId);
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
     */
    private void sendTextMessage(Long chatId, String text, InlineKeyboardMarkup keyboard) {
        try {
            SendMessage message = SendMessage.builder()
                    .chatId(chatId.toString())
                    .text(text)
                    .parseMode("Markdown")
                    .disableWebPagePreview(true)
                    .replyMarkup(keyboard)
                    .build();

            execute(message);
            logger.debug("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {}: {} —Å–∏–º–≤–æ–ª–æ–≤", chatId, text.length());

        } catch (TelegramApiException e) {
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {}: {}", chatId, e.getMessage());
            // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –ø—Ä–æ–±—É–µ–º –±–µ–∑ Markdown
            if (e.getMessage().contains("parse")) {
                try {
                    SendMessage plainMessage = SendMessage.builder()
                            .chatId(chatId.toString())
                            .text(text)
                            .replyMarkup(keyboard)
                            .build();

                    execute(plainMessage);
                    logger.debug("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è");
                } catch (TelegramApiException retry) {
                    logger.error("‚ùå –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {}", retry.getMessage());
                }
            }
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
     */
    private void sendSimpleMessage(Long chatId, String text) {
        sendTextMessage(chatId, text, null);
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç ID —á–∞—Ç–∞ –∏–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    private Long getChatId(Update update) {
        if (update.hasMessage()) {
            return update.getMessage().getChatId();
        } else if (update.hasCallbackQuery()) {
            return update.getCallbackQuery().getMessage().getChatId();
        }
        return null;
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    private String getUserDisplayName(Update update) {
        var user = update.hasMessage()
                ? update.getMessage().getFrom()
                : update.hasCallbackQuery()
                ? update.getCallbackQuery().getFrom()
                : null;

        if (user == null) return "Unknown";

        StringBuilder name = new StringBuilder();
        if (user.getFirstName() != null) {
            name.append(user.getFirstName());
        }

        if (user.getLastName() != null) {
            if (name.length() > 0) name.append(" ");
            name.append(user.getLastName());
        }

        if (name.isEmpty() && user.getUserName() != null) {
            name.append("@").append(user.getUserName());
        }

        return name.length() > 0 ? name.toString() : "User" + user.getId();
    }

    @Override
    public void onRegister() {
        logger.info("üöÄ –ë–æ—Ç @{} v2.0 —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ Telegram", getBotUsername());
    }

    @Override
    public void clearWebhook() {
        try {
            super.clearWebhook();
            logger.info("üßπ Webhook –æ—á–∏—â–µ–Ω –¥–ª—è –±–æ—Ç–∞ @{}", getBotUsername());
        } catch (Exception e) {
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å webhook: {}", e.getMessage());
        }
    }
}